[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateNaturalType.
 */]
[module ntStateGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::main::templates::util/]

[**
 * The documentation of the template generateNaturalType.
 * @param aNaturalType
 */]

[template public ntStateClassGen(nt : NaturalType,model : Model)]
[file (getFolderPath() +'/impl/'+ nt.name.toUpperFirst()+'State.java', false, 'UTF-8')]
package [getPackagePath()/].impl;

import java.util.Map;
import java.util.HashMap;

import [getPackagePath()/].*;


public class [nt.name.toUpperFirst()/]State{
	[publicAttributeValue(nt.attributes)/]
	[ntStateRoleBlock(nt,model)/]

}
[/file]
[/template]


[comment][template private ntStateImpoertBlock(nt : NaturalType,model : Model) post (replaceAll('\t', '').trim())]
[let roles : Set(AbstractRole) = getRoles(nt,getAllFulfillment(model.relations))]
[if(not roles->isEmpty())]
[for(ar:AbstractRole | roles)]
[if(ar.oclIsKindOf(RoleType))]
import [getPackagePath()/].impl.[getCompartmentNameByRoleType(aRoleType,model)/]Impl;
import [getPackagePath()/].impl.[getCompartmentNameByRoleType(aRoleType,model)/]Impl.[nt.name/][aRoleType.name/]Impl;
[else]
import [getPackagePath()/].impl.[getCompartmentNameByRoleGroup(ar.oclAsType(RoleGroup),model)/]Impl;
[for(rt:RoleType|ar.oclAsType(RoleGroup).elements)]
import [getPackagePath()/].impl.[getCompartmentNameByRoleGroup(ar.oclAsType(RoleGroup),model)/]Impl.[nt.name/][rt.name/]Impl;
[/for]
[/if]
[/for]
[/if]
[/let]
[/template][/comment]

[template private ntStateRoleBlock(aNaturalType : NaturalType,aModel : Model) post (replaceAll('\t', '').trim())]
[let roleTypes : Set(RoleType) = getRoles(aNaturalType,getAllFulfillment(aModel.relations))]
[if(not roleTypes->isEmpty())]
[for(aRoleType:RoleType | roleTypes)]
Map<[getOwner(aRoleType).name/]Impl,[getOwner(aRoleType).name/]Impl.[aNaturalType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]>  [aRoleType.name.toLowerFirst()/]s=new HashMap<[getOwner(aRoleType).name/]Impl,[getOwner(aRoleType).name/]Impl.[aNaturalType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]>();
[/for]
[/if]
[/let]
[/template]




