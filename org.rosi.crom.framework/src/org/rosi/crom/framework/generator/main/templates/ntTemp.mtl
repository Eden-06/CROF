[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateNaturalType.
 */]
[module ntTemp('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::main::templates::util/]

[**
 * The documentation of the template generateNaturalType.
 * @param aNaturalType
 */]
[comment]
[template public ntGen(nt : NaturalType,model:Model)]
[ntInterfaceGen(nt,model)/]
[ntStateClassGen(nt,model)/]
[ntNormalClassGen(nt,model)/]
[/template]

[template public ntInterfaceGen(nt : NaturalType,model : Model)]

[file (getFolderPath() +'/'+ nt.name.toUpperFirst()+'.java', false, 'UTF-8')]
package [getPackagePath()/];

import [getPackagePath()/].*;

interface [nt.name.toUpperFirst()/]{
	[attributeMethodForInterface(nt.attributes)/]
	[operationForInterface(nt.operations)/]
}
[/file]
[/template]

[template public ntStateClassGen(nt : NaturalType,model : Model)]
[file (getFolderPath() +'/impl/'+ nt.name.toUpperFirst()+'State.java', false, 'UTF-8')]
package [getPackagePath()/].impl;

import java.util.Map;
import java.util.HashMap;

[for(t:String| filtJavaType(getTypeNameInNaturalType(nt)))]
import [getPackagePath()/].[t/];
[/for]

[ntStateImpoertBlock(nt,model)/]
[/file]
[/template]

[template public ntStateImpoertBlock(nt : NaturalType,model : Model) post (replaceAll('\t', '').trim())]
[let roleTypes : Set(RoleType) = getRoles(nt,getAllFulfillment(model.relations))]
[if(not roleTypes->isEmpty())]
[for(aRoleType:RoleType | roleTypes)]
import [getPackagePath()/].[getOwner(aRoleType)/];
[/for]
[/if]
[/let]
[/template]

[template public ntAbstractClassGen(nt : NaturalType)]
[file ('Abstract'.concat(nt.name.toUpperFirst().concat('.java')), false, 'UTF-8')]
public class Abstract[nt.name.toUpperFirst()/]{
}
[/file]
[/template]


[template public ntNormalClassGen(nt : NaturalType,model:Model)]
[file (nt.name.toUpperFirst().concat('.java'), false, 'UTF-8')]


public class [nt.name/]{
	[nt.name/]State state=new [nt.name/]State();
	public [nt.name/](){}
	[if(not nt.attributes-> isEmpty())]
	public [nt.name/]([generateParametersForConstructor(attributes)/]){
		[generateOperationsForConstructor(attributes)/]
	}
	[/if]
	[attributeMethodForState(nt.attributes)/]
	[operation(nt.operations)/]


	public Abstract[nt.name.toUpperFirst()/] addRole(Abstract[nt.name.toUpperFirst()/] role){
[let roles : Set(AbstractRole) = getRoles(nt,getAllFulfillment(model.relations))]
	[if(not roles->isEmpty())]
		[for(ar:AbstractRole | roles)]
			[if(ar.oclIsKindOf(RoleType))]
				[getCompartmentNameByRoleType(aRoleType,model)/]
			[else]
				[getCompartmentNameByRoleGroup(ar.oclAsType(RoleGroup),model)/]
			[/if]
		[/for]
	[/if]
[/let]



		return role;
	}

	public Boolean removeRole(Abstract[nt.name.toUpperFirst()/] role){
		Boolean b=state.roles.remove(role).equals(role);
		return b;
	}
	public Boolean hasRole(Abstract[nt.name.toUpperFirst()/] role){
		return state.roles.containsValue(role);
	}
	public Boolean hasRole(String roleName){
		return state.roles.containsKey(roleName);
	}

	public Abstract[nt.name.toUpperFirst()/] getRole(String roleName){
		return state.roles.get(roleName);
	}	
	public Boolean isSame([nt.name/] [nt.name.toLowerFirst()/]){
		return state==[nt.name.toLowerFirst()/].state;
	}

}







[/file]
[/template]






[template public ntRoleTypeGen(nt:NaturalType,relations:Set(Relation))]
[let roles : Set(AbstractRole) = getRoles(nt,getAllFulfillment(relations))]
[if(not roles->isEmpty())]
[for(r:AbstractRole | roles)]
[if(r.oclIsKindOf(RoleType))]
[r.oclAsType(RoleType).name/]
[elseif(r.oclIsKindOf(RoleGroup))]
[r.oclAsType(RoleGroup).name/]
[else]
something wrong in ntRoleTypeGen()
[/if]
[/for]
[/if]
[/let]
[/template]

[template public getImport(nt:NaturalType,model:Model)]
[let roles : Set(AbstractRole) = getRoles(nt,getAllFulfillment(model.relations))]
[if(not roles->isEmpty())]
[for(r:AbstractRole | roles)]
[if(r.oclIsKindOf(RoleType))]
import [r.oclAsType(RoleType)/].[r.oclAsType(RoleType).name/]
[elseif(r.oclIsKindOf(RoleGroup))]
[r.oclAsType(RoleGroup).name/]
[else]
something wrong in ntRoleTypeGen()
[/if]
[/for]
[/if]
[/let]
[/template]

[template public getCompartmentNameInNaturalTypeGen(nt:NaturalType,model:Model)]
[let roles : Set(AbstractRole) = getRoles(nt,getAllFulfillment(model.relations))]
[if(not roles->isEmpty())]
[for(r:AbstractRole | roles)]
[if(r.oclIsKindOf(RoleType))]
[getCompartmentNameByRoleType(r.oclAsType(RoleType),model)/]

[elseif(r.oclIsKindOf(RoleGroup))]
[r.oclAsType(RoleGroup).name/]
[else]
something wrong in ntRoleTypeGen()
[/if]
[/for]
[/if]
[/let]
[/template]

[template public getCompartmentNameByRoleType(rt:RoleType,model:Model) post (replaceAll('\n', '').trim())]
[for(ct:CompartmentType|model.elements)]
[for(p:Part|ct.parts)]

[if(p.role.oclIsKindOf(RoleType))]
[if(p.role.oclAsType(RoleType).name=rt.name)]
[ct.name/]
[/if]

[else]
[/if]



[/for]


[/for]

[/template]

[template public getCompartmentNameByRoleGroup(rt:RoleGroup,model:Model) post (replaceAll('\n', '').trim())]

[for(ct:CompartmentType|model.elements)]
[for(p:Part|ct.parts)]

[if(p.role.oclIsKindOf(RoleGroup))]
[if(p.role.oclAsType(RoleGroup).name=rt.name)]
[ct.name/]
[/if]
[/if]



[/for]


[/for]

[/template]

[query public getAllCompartment(rt:RoleType,model:Model): Set(CompartmentType) = model.elements ->selectByType(CompartmentType)/][/comment]

