[comment encoding = UTF-8 /]
[**
 * The documentation of the module globalGenerator.
 */]
[module util('platform:/resource/org.rosi.crom.metamodel/')]


[**
 * The documentation of the template generateDataType.
 * @param aDataType
 */]
[template public generateParametersForConstructor(attributes : Set(Attribute)) post (replaceAll('\n', '').trim())]
[for (a : Attribute  | attributes) separator (', ')]
[typeof(a.type)/] [a.name/]
[/for]
[/template]

[template public generateOperationsForConstructor(attributes : Set(Attribute)) post (replaceAll('\n', '').trim())]
[for (a : Attribute  | attributes)]
state.[a.name/]=[a.name/]; 
[/for]
[/template]

[template public privateAttributeValue(attributes : Set(Attribute))]
[for (a : Attribute | attributes)]
private [typeof(a.type)/] [a.name/];
[/for]	
[/template]
[template public publicAttributeValue(attributes : Set(Attribute))]
[for (a : Attribute | attributes)]
public [typeof(a.type)/] [a.name/];
[/for]	
[/template]
[template public attributeValueWithoutPrivate(attributes : Set(Attribute))]
[for (a : Attribute | attributes)]
[typeof(a.type)/] [a.name/];
[/for]
[/template]
[template public attributeMethod(attributes : Set(Attribute))]
[for (a : Attribute | attributes)]
@Override
public [typeof(a.type)/] [a.name.toUpperFirst().prefix('get')/](){
	return [a.name/];
}

@Override
public void [a.name.toUpperFirst().prefix('set')/]([typeof(a.type)/] [a.name/]){
	this.[a.name/] = [a.name/];
}
[/for]
[/template]


[template public attributeMethodForState(attributes : Set(Attribute))]
[for (a : Attribute | attributes)]
@Override
public [typeof(a.type)/] [a.name.toUpperFirst().prefix('get')/](){
	return state.[a.name/];
}

@Override
public void [a.name.toUpperFirst().prefix('set')/]([typeof(a.type)/] [a.name/]){
	state.[a.name/] = [a.name/];
}
[/for]
[/template]
[template public operation(operations : Set(Operation))]
[for (o : Operation | operations)]
@Override
public [typeof(o.type)/] [o.name/]([parameter(o)/]){
	throw new UnsupportedOperationException("Invalid operation for sorted list.");
}
[/for]
[/template]

[template public attributeValueForInterface(attributes : Set(Attribute))]
[for (a : Attribute | attributes)]
private [typeof(a.type)/] [a.name/];	
[/for]
[/template]
[template public attributeMethodForInterface(attributes : Set(Attribute))]
[for (a : Attribute | attributes)]
[typeof(a.type)/] [a.name.toUpperFirst().prefix('get')/]();
void [a.name.toUpperFirst().prefix('set')/]([typeof(a.type)/] [a.name/]);
[/for]
[/template]

[template public operationForInterface(operations : Set(Operation))]
[for (o : Operation | operations)]
[typeof(o.type)/] [o.name/]([parameter(o)/]);
[/for]
[/template]

[template public parameter(o : Operation) post (replaceAll('\n', '').trim())]
[for (p : Parameter  | o.params) separator (', ')]
[typeof(p.type)/] [p.name/]
[/for]
[/template]


[template public typeof(t : Type) post (replaceAll('\n', '').trim())]
[if (t<>null)]
	[if (t.name='Boolean')]
		boolean
	[elseif (t.name='Char')]
		char
	[elseif (t.name='Date')]
		Date
	[elseif (t.name='Double')]
		double
	[elseif (t.name='Float')]
		float
	[elseif (t.name='Integer')]
		int
	[elseif (t.name='String')]
		String
	[else][t.name/]
	[/if]
[else]void
[/if]
[/template]

[template public getCompartmentNameByRoleType(aRoleType : RoleType, aModel : Model) post (replaceAll('\n', '').trim())]
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType : CompartmentType = aModelElement.oclAsType(CompartmentType)]
[for(aPart : Part | aCompartmentType.parts)]
[if(aPart.role.oclIsKindOf(RoleType))]
[if(aPart.role.oclAsType(RoleType).name=aRoleType.name)]
[aCompartmentType.name/]
[/if]
[else]
[/if]
[/for]
[/let]
[/if]
[/for]
[/template]

[template public getCompartmentNameByRoleGroup(aRoleGroup:RoleGroup,aModel:Model) post (replaceAll('\n', '').trim())]
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType : CompartmentType = aModelElement.oclAsType(CompartmentType)]
[for(aPart : Part | aCompartmentType.parts)]
[if(aPart.role.oclIsKindOf(RoleGroup))]
[if(aPart.role.oclAsType(RoleGroup).name=aRoleGroup.name)]
[aCompartmentType.name/]
[/if]
[else]
[/if]
[/for]
[/let]
[/if]
[/for]
[/template]




[comment][query public getPlayer(rt:RoleType,relations:Set(Relation)):Bag(Type)=relations->selectByType(Fulfillment)->select(filled=rt).filler/][/comment]

[comment][query public getPlayer(rt:RoleGroup,relations:Set(Relation)):Bag(Type)=relations->selectByType(Fulfillment)->select(filled=rt).filler/][/comment]

[query public hasPlayer(name:String,rt:RoleType,relations:Set(Relation)):
	Boolean=Sequence{relations->selectByType(Fulfillment)->select(filled=rt).filler.name,
			relations->selectByType(Fulfillment)->select(filled=rt.eContainer()).filler.name
			}->asSet()->includes(name)/]

[query public getRoleTypeByPlayerInCompartmentType(playedRoles:Set(RoleType),hasRoles:Set(RoleType)):Set(RoleType)=playedRoles->intersection(hasRoles)/]

[query public hasRole(roles:Set(AbstractRole),rt:RoleType):Boolean=roles->includes(rt)/]
[query public hasRole(roles:Set(AbstractRole),rg:RoleGroup):Boolean=roles->includes(rg)/]

[query public preparePartForConstructor(ct:CompartmentType):Set(Part) = ct.parts ->select(parts | parts.lower = 1) /]
[query public getAllFulfillments(relations:Set(Relation)): Set(Fulfillment) = relations ->selectByType(Fulfillment)/]

[comment][query public findAllRoleTypesInCompartmentType(ct:CompartmentType):Set(AbstractRole)=Sequence{self.parts.role->selectByType(RoleGroup).elements->selectByType(RoleType),self.parts.role->selectByType(RoleType)}->flatten()->excluding(null)->asSet()/][/comment]
[query public isCompartmentTypePlayedRole(ct:CompartmentType,relations:Set(Relation)):Boolean=relations->selectByType(Fulfillment).filler->selectByType(CompartmentType)->includes(ct) /]
[query public getNaturalTypeByNameOfRoleType(rt:RoleType,fulfillments:Set(Fulfillment)):Set(NaturalType)=fulfillments -> select(fulfillments | fulfillments.filled=rt).filler->asSet()/]
[query public getNaturalTypeByNameOfRoleGroup(rg:RoleGroup,fulfillments:Set(Fulfillment)):Set(NaturalType)=fulfillments -> select(fulfillments | fulfillments.filled=rg).filler->asSet()/]
[query public getTypeNameInNaturalType(nt:NaturalType) : 
	Bag(String) = Sequence{nt.attributes.type, nt.operations.params.type,nt.operations.type}
					->flatten()->excluding(null)->asSet().name
					->excluding('Boolean')->excluding('Char')->excluding('Date')->excluding('Double')->excluding('Float')->excluding('Integer')->excluding('String')/]
[query public getTypeNameInRoleType(rt:RoleType) : 
	Bag(String) = Sequence{rt.attributes.type, rt.operations.params.type,rt.operations.type}
					->flatten()->excluding(null)->asSet().name
					->excluding('Boolean')->excluding('Char')->excluding('Date')->excluding('Double')->excluding('Float')->excluding('Integer')->excluding('String')/]
[query public getTypeNameInCompartmentType(ct:CompartmentType) : 
	Bag(String) = Sequence{ct.parts.role->selectByType(RoleGroup).elements->selectByType(RoleType).attributes.type,
				ct.parts.role->selectByType(RoleGroup).elements->selectByType(RoleType).operations.type,
				ct.parts.role->selectByType(RoleGroup).elements->selectByType(RoleType).operations.params.type,
				ct.parts.role->selectByType(RoleType).attributes.type,
				ct.parts.role->selectByType(RoleType).operations.type,
				ct.parts.role->selectByType(RoleType).operations.params.type,
				ct.attributes.type, 
				ct.operations.params.type,
				ct.operations.type}
			->flatten()->excluding(null)->asSet().name/]
[query public filtJavaType(strBag:Bag(String)):Bag(String)=strBag->excluding('Boolean')->excluding('Char')->excluding('Date')->excluding('Double')->excluding('Float')->excluding('Integer')->excluding('String')/]
[comment]invoke methode[/comment] 
[query public getFolderPath(traceabilityContext : OclAny) : String =invoke('org.rosi.crom.framework.generator.main.templates.Util', 'getFolderPath()', Sequence{}) /]
[query public getPackagePath(traceabilityContext : OclAny) : String =invoke('org.rosi.crom.framework.generator.main.templates.Util', 'getPackagePath()', Sequence{}) /]
[query public setRole(rt:RoleType) : Boolean =invoke('org.rosi.crom.framework.generator.main.templates.Util', 'setRole(crom_l1_composed.impl.RoleTypeImpl)', Sequence{rt}) /]
[query public getRole(traceabilityContext : OclAny) : Set(RoleType) =invoke('org.rosi.crom.framework.generator.main.templates.Util', 'getRole()', Sequence{}) /]


[query public getAllRoleTypes(aRoleGroup:RoleGroup) : Set(RoleType) = aRoleGroup.elements->iterate(aRoleGroupElement : RoleGroupElement; roleTypes:Set(RoleType) = Set{} | 
	if (aRoleGroupElement.oclIsKindOf(RoleGroup))
	then roleTypes->union(getAllRoleTypes(aRoleGroupElement.oclAsType(RoleGroup)))
	else roleTypes->union(Set{aRoleGroupElement.oclAsType(RoleType)})
	endif)/]

[query public getAllRoleTypes(aCompartmentType:CompartmentType) : Set(RoleType) = 
	aCompartmentType.parts.role
	->iterate(aAbstractRole : AbstractRole; roleTypes:Set(RoleType) = Set{} | 
	if (aAbstractRole.oclIsKindOf(RoleGroup))
	then roleTypes->union(getAllRoleTypes(aAbstractRole.oclAsType(RoleGroup)))
	else roleTypes->union(Set{aAbstractRole.oclAsType(RoleType)})
	endif)/]

[query public getPlayers(aRoleType:RoleType,relations:Set(Relation)) : Set(Type) = relations->selectByType(Fulfillment)->select(filled=aRoleType).filler->asSet()->union(
	if (aRoleType.eContainer().oclIsKindOf(RoleGroup))
	then getPlayers(aRoleType.eContainer().oclAsType(RoleGroup),relations)
	else Set{}
	endif)/]
[query public getPlayers(aRoleGroup:RoleGroup,relations:Set(Relation)) : Set(Type) = relations->selectByType(Fulfillment)->select(filled=aRoleGroup).filler->asSet()->union(
	if (aRoleGroup.eContainer().oclIsKindOf(RoleGroup))
	then getPlayers(aRoleGroup.eContainer().oclAsType(RoleGroup),relations)
	else Set{}
	endif)/]
[query public getRoles(nt:NaturalType,fulfillments:Set(Fulfillment)):Set(RoleType)=
	fulfillments -> select(fulfillments | fulfillments.filler=nt).filled
	->asSet()->iterate(aAbstractRole : AbstractRole; roleTypes:Set(RoleType) = Set{} | 
	if (aAbstractRole.oclIsKindOf(RoleGroup))
	then roleTypes->union(getAllRoleTypes(aAbstractRole.oclAsType(RoleGroup)))
	else roleTypes->union(Set{aAbstractRole.oclAsType(RoleType)})
	endif)/]
[query public getRoles(ct:CompartmentType,fulfillments:Set(Fulfillment)):Set(RoleType)=
	fulfillments -> select(fulfillments | fulfillments.filler=ct).filled
	->asSet()->iterate(aAbstractRole : AbstractRole; roleTypes:Set(RoleType) = Set{} | 
	if (aAbstractRole.oclIsKindOf(RoleGroup))
	then roleTypes->union(getAllRoleTypes(aAbstractRole.oclAsType(RoleGroup)))
	else roleTypes->union(Set{aAbstractRole.oclAsType(RoleType)})
	endif)/]

[query public getOwner(aRoleType:RoleType):CompartmentType=
	if (aRoleType.eContainer().oclIsKindOf(RoleGroup))
	then getOwner(aRoleType.eContainer().oclAsType(RoleGroup))
	else aRoleType.eContainer().eContainer().oclAsType(CompartmentType)
	endif/]

[query public getOwner(aRoleGroup:RoleGroup):CompartmentType=
	if (aRoleGroup.eContainer().oclIsKindOf(RoleGroup))
	then getOwner(aRoleGroup.eContainer().oclAsType(RoleGroup))
	else aRoleGroup.eContainer().eContainer().oclAsType(CompartmentType)
	endif/]


[query public palyerCollection(aType:Type,types:Set(Type)):Set(Type)=Sequence{aType,types}->flatten()->excluding(null)->asSet()/]
[query public palyerCollection(types1:Set(Type),types2:Set(Type)):Set(Type)=Sequence{types1,types2}->flatten()->excluding(null)->asSet()/]
[query public palyerCollection(types:Set(Type)):Set(Type)=types->flatten()->excluding(null)->asSet()/]
[query public palyerCollection(aType:Type):Set(Type)=Sequence{aType}->flatten()->excluding(null)->asSet()/]
[query public getRelationshipsWithoutConstraint(aCompartmentType:CompartmentType):Set(Relationship)=aCompartmentType.relationships->asSet()/]
[query public getRelationshipsWithConstraint(aCompartmentType:CompartmentType):Set(Relationship)=
	aCompartmentType.constraints->iterate(aConstraint : Constraint; relationships:OrderedSet(Relationship) = OrderedSet{} | 
	if (aConstraint.oclIsKindOf(Irreflexive))
	then relationships->append(aConstraint.oclAsType(Irreflexive).relation)
	else if(aConstraint.oclIsKindOf(Reflexive))
		then relationships->append(aConstraint.oclAsType(Reflexive).relation)
		else if(aConstraint.oclIsKindOf(Total))
			then relationships->append(aConstraint.oclAsType(Total).relation)
			else if(aConstraint.oclIsKindOf(Cyclic))
				then relationships->append(aConstraint.oclAsType(Cyclic).relation)
				else if(aConstraint.oclIsKindOf(Acyclic))
					then relationships->append(aConstraint.oclAsType(Acyclic).relation)
					else relationships
					endif
				endif
			endif
		endif
	endif 
	)->asSet()/]

[query public getRelationships(aRoleType : RoleType,relationships:OrderedSet(Relationship)):Set(Relationship)=
	relationships->iterate(aRelationship : Relationship; newRelationships:OrderedSet(Relationship) = OrderedSet{} | 
	if (aRelationship.first.holder=aRoleType or aRelationship.second.holder=aRoleType)
	then newRelationships->append(aRelationship)
	else newRelationships
	endif)->asSet()/]

[comment][query public getConstraint(relationships:OrderedSet(Relationship)):Set(Relationship)=
	relationships->iterate(aRelationship : Relationship; newRelationships:OrderedSet(Relationship) = OrderedSet{} | 
	if (aRelationship.first.holder=aRoleType or aRelationship.second.holder=aRoleType)
	then newRelationships->append(aRelationship)
	else newRelationships
	endif)->asSet()/][/comment]






