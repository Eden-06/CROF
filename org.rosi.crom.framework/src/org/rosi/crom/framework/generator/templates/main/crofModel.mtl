[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module crofModel('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::universalQueries/]
[import org::rosi::crom::framework::generator::templates::main::mainDataType/]
[import org::rosi::crom::framework::generator::templates::main::mainNaturalType/]
[import org::rosi::crom::framework::generator::templates::main::mainCompartmentType/]
[import org::rosi::crom::framework::generator::templates::main::mainFactory/]
[import org::rosi::crom::framework::generator::templates::main::test/]
[import org::rosi::crom::framework::generator::templates::main::implEnum/]


[**
 * The documentation of the template main.
 * @param aModel
 */]


[template public crofModel(aModel:Model)]
[file (getFolderPath() +'/crof/CrofModel.java', false, 'UTF-8')]
package [getPackagePath()/].crof;

import java.util.ArrayList;
import java.util.List;


public class CrofModel{
	private String model="[getPackagePath()/]";
	public String getModelName(){
		return this.model;
	}
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
	List<Crof[aCompartmentType.name/]> crof[aCompartmentType.name.toUpperFirst()/]s=new ArrayList<Crof[aCompartmentType.name/]>();
	public List<Crof[aCompartmentType.name/]> getCrof[aCompartmentType.name.toUpperFirst()/]s() {
		return crof[aCompartmentType.name.toUpperFirst()/]s;
	}

	public void setCrof[aCompartmentType.name.toUpperFirst()/]s(List<Crof[aCompartmentType.name.toUpperFirst()/]> crof[aCompartmentType.name.toUpperFirst()/]s) {
		this.crof[aCompartmentType.name.toUpperFirst()/]s = crof[aCompartmentType.name.toUpperFirst()/]s;
	}
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
	List<Crof[aNaturalType.name/]> crof[aNaturalType.name.toUpperFirst()/]s=new ArrayList<Crof[aNaturalType.name/]>();
	public List<Crof[aNaturalType.name.toUpperFirst()/]> getCrof[aNaturalType.name.toUpperFirst()/]s() {
		return crof[aNaturalType.name.toUpperFirst()/]s;
	}

	public void setCrof[aNaturalType.name.toUpperFirst()/]s(List<Crof[aNaturalType.name.toUpperFirst()/]> crof[aNaturalType.name.toUpperFirst()/]s) {
		this.crof[aNaturalType.name.toUpperFirst()/]s = crof[aNaturalType.name.toUpperFirst()/]s;
	}
[/let]
[elseif(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(notJavaType(aDataType))]
	List<Crof[aDataType.name/]> crof[aDataType.name.toUpperFirst()/]s=new ArrayList<Crof[aDataType.name/]>();
	public List<Crof[aDataType.name.toUpperFirst()/]> getCrof[aDataType.name.toUpperFirst()/]s() {
		return crof[aDataType.name.toUpperFirst()/]s;
	}

	public void setCrof[aDataType.name.toUpperFirst()/]s(List<Crof[aDataType.name.toUpperFirst()/]> crof[aDataType.name.toUpperFirst()/]s) {
		this.crof[aDataType.name.toUpperFirst()/]s = crof[aDataType.name.toUpperFirst()/]s;
	}
[/if]
[/let]
[/if]
[/for]


}
[/file]
[/template]