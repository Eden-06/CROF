[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateCompartmentType.
 */]
[module implCompartmentTypePlayerStateGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::generalQueries/]
[import org::rosi::crom::framework::generator::templates::main::generalTemplates/]
[import org::rosi::crom::framework::generator::templates::main::implRoleTypeGen/]
[import org::rosi::crom::framework::generator::templates::main::interfaceRoleTypeGen/]

[**
 * The documentation of the template generateCompartmentType.
 * @param aDataType
 */]

[template public implCompartmentTypePlayerStateGen(aCompartmentType : CompartmentType, model:Model)]
[file (getFolderPath() +'/impl/'+ aCompartmentType.name.toUpperFirst()+'State.java', false, 'UTF-8')]
package [getPackagePath()/].impl;

import java.util.List;
import java.util.ArrayList;

import [getPackagePath()/].*;

public class [aCompartmentType.name.toUpperFirst()/]State{
	[attributesStateCompartmentType(aCompartmentType,model.relations)/]
	public [aCompartmentType.name.toUpperFirst()/]Impl compoundObject;
}
[/file]
[/template]


[template private attributesStateCompartmentType(aCompartmentType : CompartmentType,relations : Set(Relation))]
[attributesState(aCompartmentType.attributes)/]
[roleAttributeCompartmentTypeState(aCompartmentType,relations)/]
[/template]

[template private roleAttributeCompartmentTypeState(aCompartmentType : CompartmentType,relations : Set(Relation)) post (replaceAll('\t', '').trim())]
[let roleTypes : Set(RoleType) = getRoles(aCompartmentType,getAllFulfillments(relations))]
[if(not roleTypes->isEmpty())]
[for(aRoleType:RoleType | roleTypes)]
[comment]Map<[getOwner(aRoleType).name/],[getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/]>  [aRoleType.name.toLowerFirst()/]s=new HashMap<[getOwner(aRoleType).name/],[getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/]>();[/comment]
List<[getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/]>  [aRoleType.name.toLowerFirst()/]s=new ArrayList<[getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/]>();
[/for]
[/if]
[/let]
[/template]