[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateCompartmentType.
 */]
[module implCompartmentTypePlayer('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::universalQueries/]
[import org::rosi::crom::framework::generator::templates::main::universalImplCompartmentType/]

[**
 * The documentation of the template generateCompartmentType.
 * @param aDataType
 */]

[template public implCompartmentTypePlayer(aCompartmentType : CompartmentType, model : Model)]
[file (getFolderPath() +'/impl/'+ aCompartmentType.name.toUpperFirst()+'Impl.java', false, 'UTF-8')]
package [getPackagePath()/].impl;

import java.util.List;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Map;

import [getPackagePath()/].*;

public class [aCompartmentType.name.toUpperFirst()/]Impl implements [aCompartmentType.name.toUpperFirst()/]{
	protected [aCompartmentType.name/]State state;
	private final Model model;

	public [aCompartmentType.name/]Impl(Model model) {
		state=new [aCompartmentType.name/]State();
		state.compoundObject=this;
		this.model=model;
	}

	@Override
	public Model getModel(){
		return this.model;
	}

	@Override
	public [aCompartmentType.name/] getCompoundObject() {
		return this.state.compoundObject;
	}

	[universalImplCompartmentType(aCompartmentType,model)/]
[comment]	[playerFunction(aCompartmentType,model)/][/comment]
	[playerFunction(aCompartmentType,model)/]
}
[/file]
[/template]

[template private ctEditRoleBlock(aCompartmentType : CompartmentType,aModel : Model)]
[let roleTypes : Set(RoleType) = getRoles(aCompartmentType,aModel.relations)]
[if(not roleTypes->isEmpty())]
[for(aRoleType:RoleType | roleTypes)]
public void add[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name/]Impl [getOwner(aRoleType).name.toLowerFirst()/],[getOwner(aRoleType).name/]Impl.[aCompartmentType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/] [aRoleType.name.toLowerFirst()/]) {
	state.[aRoleType.name.toLowerFirst()/]s.put([getOwner(aRoleType).name.toLowerFirst()/],[aRoleType.name.toLowerFirst()/]);
}
public Map<[getOwner(aRoleType).name/]Impl,[getOwner(aRoleType).name/]Impl.[aCompartmentType.name/][aRoleType.name.toUpperFirst()/]> get[aRoleType.name.toUpperFirst()/]s() {
	return state.[aRoleType.name.toLowerFirst()/]s;
}
public [getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/] remove[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name/]Impl [getOwner(aRoleType).name.toLowerFirst()/],[getOwner(aRoleType).name/]Impl.[aCompartmentType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/] [aRoleType.name.toLowerFirst()/]){
	return state.[aRoleType.name.toLowerFirst()/]s.remove([getOwner(aRoleType).name.toLowerFirst()/]);
}
[/for]
[/if]
[/let]
[/template]

[template public playerFunction(aCompartmentType : CompartmentType,aModel : Model)]
@Override
public boolean isSame(Object object){
[let roles:Set(RoleType)=getRoles(aCompartmentType,aModel.relations)]
[for(aRoleType:RoleType|roles)]
	if(object instanceof [getOwner(aRoleType).name/]Impl.[aCompartmentType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/])
		return this.state.equals((([getOwner(aRoleType).name/]Impl.[aCompartmentType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/])object).state);
[/for]
[/let]
	return false;
}
[let roleTypes:Set(RoleType)=getRoles(aCompartmentType,aModel.relations)]
[for(aRoleType:RoleType|roleTypes)]
@Override
public boolean has[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/]){
	for(int i=0;i<state.[aRoleType.name.toLowerFirst()/]s.size();i++){
		if(state.[aRoleType.name.toLowerFirst()/]s.get(i).getOwner().equals([getOwner(aRoleType).name.toLowerFirst()/])){
			return true;
		}
	}
	return false;
}
@Override
public [getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/] get[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/]){
	for(int i=0;i<state.[aRoleType.name.toLowerFirst()/]s.size();i++){
		if(state.[aRoleType.name.toLowerFirst()/]s.get(i).getOwner().equals([getOwner(aRoleType).name.toLowerFirst()/])){
			return state.[aRoleType.name.toLowerFirst()/]s.get(i);
		}
	}
	return null;
}
@Override
public List<[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/]> get[aRoleType.name.toUpperFirst()/]s(){
	return state.[aRoleType.name.toLowerFirst()/]s;
}
@Override
public boolean add[getOwner(aRoleType).name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/] [aRoleType.name.toLowerFirst()/]) {
	if(state.[aRoleType.name.toLowerFirst()/]s.contains([aRoleType.name.toLowerFirst()/]))
			return false;
		return state.[aRoleType.name.toLowerFirst()/]s.add([aRoleType.name.toLowerFirst()/]);
}
@Override
public boolean remove[getOwner(aRoleType).name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name/] [getOwner(aRoleType).name.toLowerFirst()/]){
	for(int i=0;i<state.[aRoleType.name.toLowerFirst()/]s.size();i++) {
			if(state.[aRoleType.name.toLowerFirst()/]s.get(i).getOwner().equals([getOwner(aRoleType).name.toLowerFirst()/])) {
				state.[aRoleType.name.toLowerFirst()/]s.remove(i);
				return true;
			}
		}
		return false;
}
[/for]
[/let]
[/template]
