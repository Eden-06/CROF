[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateCompartmentType.
 */]
[module implModel('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::universalQueries/]
[import org::rosi::crom::framework::generator::templates::main::universalTemplates/]
[import org::rosi::crom::framework::generator::templates::main::crofRoleType/]
[import org::rosi::crom::framework::generator::templates::main::crofRelationship/]


[**
 * The documentation of the template generateCompartmentType.
 * @param aDataType
 */]

[template public implModel(aModel : Model)]
[file (getFolderPath() +'/impl/ModelImpl.java', false, 'UTF-8')]
package [getPackagePath()/].impl;

import java.util.List;
import java.util.ArrayList;


import [getPackagePath()/].*;

public class ModelImpl implements Model{	
	private String model="[getPackagePath()/]";
	@Override
	public String getModelName(){
		return this.model;
	}
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(notJavaType(aDataType))]
	private List<[aDataType.name/]> [aDataType.name.toLowerFirst()/]s=new ArrayList<[aDataType.name/]>();
	@Override
	public void set[aDataType.name.toUpperFirst()/](List<[aDataType.name/]> [aDataType.name.toLowerFirst()/]s){
		this.[aDataType.name.toLowerFirst()/]s=[aDataType.name.toLowerFirst()/]s;
	}
	@Override
	public List<[aDataType.name/]> get[aDataType.name.toUpperFirst()/](){
		return this.[aDataType.name.toLowerFirst()/]s;
	}
	@Override
	public [aDataType.name/] create[aDataType.name/](){
		[aDataType.name.toUpperFirst()/]Impl [aDataType.name.toLowerFirst()/]=new [aDataType.name.toUpperFirst()/]Impl();
		this.[aDataType.name.toLowerFirst()/]s.add([aDataType.name.toLowerFirst()/]);
		return [aDataType.name.toLowerFirst()/];
	}
	@Override
	public int getIndex([aDataType.name.toUpperFirst()/] [aDataType.name.toLowerFirst()/]) {
		return this.[aDataType.name.toLowerFirst()/]s.indexOf([aDataType.name.toLowerFirst()/]);		
	}
[/if]
[/let]
[else]
	private List<[aModelElement.name/]> [aModelElement.name.toLowerFirst()/]s=new ArrayList<[aModelElement.name/]>();
	@Override
	public void set[aModelElement.name.toUpperFirst()/](List<[aModelElement.name/]> [aModelElement.name.toLowerFirst()/]s){
		this.[aModelElement.name.toLowerFirst()/]s=[aModelElement.name.toLowerFirst()/]s;
	}
	@Override
	public List<[aModelElement.name/]> get[aModelElement.name.toUpperFirst()/](){
		return this.[aModelElement.name.toLowerFirst()/]s;
	}
	@Override
	public [aModelElement.name/] create[aModelElement.name/](){
		[aModelElement.name.toUpperFirst()/]Impl [aModelElement.name.toLowerFirst()/]=new [aModelElement.name.toUpperFirst()/]Impl(this);
		this.[aModelElement.name.toLowerFirst()/]s.add([aModelElement.name.toLowerFirst()/]);
		return [aModelElement.name.toLowerFirst()/];
	}
	@Override
	public int getIndex([aModelElement.name.toUpperFirst()/] [aModelElement.name.toLowerFirst()/]) {
		return this.[aModelElement.name.toLowerFirst()/]s.indexOf([aModelElement.name.toLowerFirst()/]);		
	}
[/if]
[/for]	
}
[/file]
[/template]


