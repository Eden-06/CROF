[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateNaturalType.
 */]
[module ntStateGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::util/]

[**
 * The documentation of the template generateNaturalType.
 * @param aNaturalType
 */]

[template public ntStateClassGen(aNaturalType : NaturalType,aModel : Model)]
[file (getFolderPath() +'/impl/'+ aNaturalType.name.toUpperFirst()+'State.java', false, 'UTF-8')]
package [getPackagePath()/].impl;

import java.util.Map;
import java.util.HashMap;

import [getPackagePath()/].*;



public class [aNaturalType.name.toUpperFirst()/]State[superNaturalTypeState(aNaturalType,aModel.relations)/]{
	[attributesNaturalTypeState(aNaturalType,aModel.relations)/]
[comment]	[superAttributeNaturalTypeState(aNaturalType,aModel.relations)/][/comment]
}
[/file]
[/template]

[template private attributesNaturalTypeState(aNaturalType : NaturalType,relations : Set(Relation))]
[attributesState(aNaturalType.attributes)/]
[roleAttributeNaturalTypeState(aNaturalType,relations)/]
[/template]

[template private superNaturalTypeState(aNaturalType : NaturalType,relations : Set(Relation)) post(replaceAll('\n',''))]
[let superNaturalType:NaturalType=getSuper(aNaturalType,relations)]
[if(not superNaturalType->isEmpty())]
 extends [superNaturalType.name.toUpperFirst()/]State
[/if]
[/let]
[/template]

[template private superAttributeNaturalTypeState(aNaturalType : NaturalType,relations : Set(Relation))]
[if(hasSuper(aNaturalType,relations))]
[let superNaturalType:NaturalType=getSuper(aNaturalType,relations)]
[superAttributeNaturalTypeState(superNaturalType,relations)/]
[/let]
[/if]
[attributesState(aNaturalType.attributes)/]
[/template]

[comment][template private ntStateImpoertBlock(nt : NaturalType,model : Model) post (replaceAll('\t', '').trim())]
[let roles : Set(AbstractRole) = getRoles(nt,getAllFulfillment(model.relations))]
[if(not roles->isEmpty())]
[for(ar:AbstractRole | roles)]
[if(ar.oclIsKindOf(RoleType))]
import [getPackagePath()/].impl.[getCompartmentNameByRoleType(aRoleType,model)/]Impl;
import [getPackagePath()/].impl.[getCompartmentNameByRoleType(aRoleType,model)/]Impl.[nt.name/][aRoleType.name/]Impl;
[else]
import [getPackagePath()/].impl.[getCompartmentNameByRoleGroup(ar.oclAsType(RoleGroup),model)/]Impl;
[for(rt:RoleType|ar.oclAsType(RoleGroup).elements)]
import [getPackagePath()/].impl.[getCompartmentNameByRoleGroup(ar.oclAsType(RoleGroup),model)/]Impl.[nt.name/][rt.name/]Impl;
[/for]
[/if]
[/for]
[/if]
[/let]
[/template][/comment]

[template private roleAttributeNaturalTypeState(aNaturalType : NaturalType,relations : Set(Relation)) post (replaceAll('\t', '').trim())]
[let roleTypes : Set(RoleType) = getRoles(aNaturalType,getAllFulfillments(relations))]
[if(not roleTypes->isEmpty())]
[for(aRoleType:RoleType | roleTypes)]
Map<[getOwner(aRoleType).name/],[getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/]>  [aRoleType.name.toLowerFirst()/]s=new HashMap<[getOwner(aRoleType).name/],[getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/]>();
[comment]List<[aNaturalType.name.toUpperFirst()/]> roles=new ArrayList<[aNaturalType.name.toUpperFirst()/]>();[/comment]
[/for]
[/if]
[/let]
[/template]




