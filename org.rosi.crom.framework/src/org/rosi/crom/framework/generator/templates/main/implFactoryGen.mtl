[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateTypes.
 */]
[module implFactoryGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::generalQueries/]

[**
 * The documentation of the template generateDataType.
 * @param aDataType
 */]
[template public implFactoryGen(aModel:Model)]

[file (getFolderPath() +'/impl/FactoryImpl.java', false, 'UTF-8')]
package [getPackagePath()/].impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import [getPackagePath()/].*;
import [getPackagePath()/].util.*;


public class FactoryImpl implements Factory{
	Map<Types,List> instances=new HashMap<Types,List>();
	@Override
	public Map<Types, List> getInstances() {
		return instances;
	}
	@Override
	public void setInstances(Map<Types, List> instances) {
		this.instances = instances;
	}
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
	private List<[aCompartmentType.name.toUpperFirst()/]> [aCompartmentType.name.toLowerFirst()/]s=new ArrayList<[aCompartmentType.name.toUpperFirst()/]>();
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
	private List<[aNaturalType.name.toUpperFirst()/]> [aNaturalType.name.toLowerFirst()/]s=new ArrayList<[aNaturalType.name.toUpperFirst()/]>();
[/let]
[elseif(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(notJavaType(aDataType))]
	private List<[aDataType.name.toUpperFirst()/]> [aDataType.name.toLowerFirst()/]s=new ArrayList<[aDataType.name.toUpperFirst()/]>();
[/if]
[/let]
[/if]
[/for]
	public FactoryImpl(){
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
		instances.put(Types.[aCompartmentType.name.toUpper()/],[aCompartmentType.name.toLowerFirst()/]s);
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
		instances.put(Types.[aNaturalType.name.toUpper()/],[aNaturalType.name.toLowerFirst()/]s);
[/let]
[elseif(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(notJavaType(aDataType))]
		instances.put(Types.[aDataType.name.toUpper()/],[aDataType.name.toLowerFirst()/]s);
[/if]
[/let]
[/if]
[/for]
	}




[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
	@Override
	public [aCompartmentType.name/] create[aCompartmentType.name/](){
		[aCompartmentType.name.toUpperFirst()/]Impl [aCompartmentType.name.toLowerFirst()/]=new [aCompartmentType.name.toUpperFirst()/]Impl();
		[aCompartmentType.name.toLowerFirst()/]s.add([aCompartmentType.name.toLowerFirst()/]);
		return [aCompartmentType.name.toLowerFirst()/];
	}
	@Override
	public int getIndex([aCompartmentType.name.toUpperFirst()/] [aCompartmentType.name.toLowerFirst()/]) {
		return [aCompartmentType.name.toLowerFirst()/]s.indexOf([aCompartmentType.name.toLowerFirst()/]);		
	}
	[rtFactoryImplGen(aCompartmentType,aModel.relations)/]
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
	@Override
	public [aNaturalType.name/] create[aNaturalType.name/](){
		[aNaturalType.name.toUpperFirst()/]Impl [aNaturalType.name.toLowerFirst()/]=new [aNaturalType.name.toUpperFirst()/]Impl();
		[aNaturalType.name.toLowerFirst()/]s.add([aNaturalType.name.toLowerFirst()/]);
		return [aNaturalType.name.toLowerFirst()/];
	}
	@Override
	public int getIndex([aNaturalType.name.toUpperFirst()/] [aNaturalType.name.toLowerFirst()/]) {
		return [aNaturalType.name.toLowerFirst()/]s.indexOf([aNaturalType.name.toLowerFirst()/]);		
	}
[/let]
[elseif(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(notJavaType(aDataType))]
	@Override
	public [aDataType.name/] create[aDataType.name/](){
		[aDataType.name.toUpperFirst()/]Impl [aDataType.name.toLowerFirst()/]=new [aDataType.name.toUpperFirst()/]Impl();
		[aDataType.name.toLowerFirst()/]s.add([aDataType.name.toLowerFirst()/]);
		return [aDataType.name.toLowerFirst()/];
	}
	@Override
	public int getIndex([aDataType.name.toUpperFirst()/] [aDataType.name.toLowerFirst()/]) {
		return [aDataType.name.toLowerFirst()/]s.indexOf([aDataType.name.toLowerFirst()/]);		
	}
[/if]
[/let]
[/if]
[/for]

	public static Factory init(){
		return new FactoryImpl();	
	}
	@Override
	public void reset(){
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
		[aCompartmentType.name.toLowerFirst()/]s=new ArrayList<[aCompartmentType.name.toUpperFirst()/]>();
		instances.put(Types.[aCompartmentType.name.toUpper()/],[aCompartmentType.name.toLowerFirst()/]s);
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
		[aNaturalType.name.toLowerFirst()/]s=new ArrayList<[aNaturalType.name.toUpperFirst()/]>();
		instances.put(Types.[aNaturalType.name.toUpper()/],[aNaturalType.name.toLowerFirst()/]s);
[/let]
[elseif(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(notJavaType(aDataType))]
		[aDataType.name.toLowerFirst()/]s=new ArrayList<[aDataType.name.toUpperFirst()/]>();
		instances.put(Types.[aDataType.name.toUpper()/],[aDataType.name.toLowerFirst()/]s);
[/if]
[/let]
[/if]
[/for]
	}

	@Override
	public void storeXML(){
	}
	@Override
	public void storeJson(){
		new Serializer().toJson();
	}

	@Override
	public void loadXML(){
	}
	@Override
	public void loadJson(String filePath){
		new Deserializer().fromJson(filePath);
	}
}
[/file]


[/template]


[template private rtFactoryImplGen(aCompartmentType : CompartmentType,relations:Set(Relation))]
[for(ar:AbstractRole|aCompartmentType.parts.role)]
[if(ar.oclIsKindOf(RoleType))]
[for(aType:Type|getPlayers(ar.oclAsType(RoleType),relations))]
[relationFactoryImplGen(aType,ar.oclAsType(RoleType))/]
[/for]
[elseif(ar.oclIsKindOf(RoleGroup))]
[let roleTypes:Set(RoleType)=getAllRoleTypes(ar.oclAsType(RoleGroup))]
[for(aRoleType:RoleType|roleTypes)]
[for(aType:Type|getPlayers(aRoleType,relations))]
[relationFactoryImplGen(aType,aRoleType)/]
[/for]
[/for]
[/let]
[else]
something wrong in rtModelGen.mtl line 21.
[/if]
[/for]
[/template]

[template private relationFactoryImplGen(aType:Type,aRoleType : RoleType)]
@Override
public [getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/] bind[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/],[aType.name.toUpperFirst()/] [aType.name.toLowerFirst()/]){
	return [getOwner(aRoleType).name.toLowerFirst()/].bind[aRoleType.name.toUpperFirst()/]([aType.name.toLowerFirst()/]);
}

@Override
public boolean unbind[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/],[aType.name.toUpperFirst()/] [aType.name.toLowerFirst()/]){
	return [getOwner(aRoleType).name.toLowerFirst()/].unbind[aRoleType.name.toUpperFirst()/]([aType.name.toLowerFirst()/]);
}



[/template]


