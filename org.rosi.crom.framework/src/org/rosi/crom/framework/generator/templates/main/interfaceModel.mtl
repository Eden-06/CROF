[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateCompartmentType.
 */]
[module interfaceModel('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::universalQueries/]
[import org::rosi::crom::framework::generator::templates::main::universalTemplates/]
[import org::rosi::crom::framework::generator::templates::main::crokRoleType/]
[import org::rosi::crom::framework::generator::templates::main::crokRelationship/]


[**
 * The documentation of the template generateCompartmentType.
 * @param aDataType
 */]

[template public interfaceModel(aModel : Model)]
[file (getFolderPath() +'/Model.java', false, 'UTF-8')]
package [getPackagePath()/];

import java.util.List;


public interface Model {
	String getModelName();
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
	void set[aCompartmentType.name.toUpperFirst()/](List<[aCompartmentType.name/]> [aCompartmentType.name.toLowerFirst()/]s);
	List<[aCompartmentType.name/]> get[aCompartmentType.name.toUpperFirst()/]();
	[aCompartmentType.name/] create[aCompartmentType.name/]();
	int getIndex([aCompartmentType.name.toUpperFirst()/] [aCompartmentType.name.toLowerFirst()/]);
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
	void set[aNaturalType.name.toUpperFirst()/](List<[aNaturalType.name/]> [aNaturalType.name.toLowerFirst()/]s);
	List<[aNaturalType.name/]> get[aNaturalType.name.toUpperFirst()/]();
	[aNaturalType.name/] create[aNaturalType.name/]();
	int getIndex([aNaturalType.name.toUpperFirst()/] [aNaturalType.name.toLowerFirst()/]);
[/let]
[elseif(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(notJavaType(aDataType))]
	void set[aDataType.name.toUpperFirst()/](List<[aDataType.name/]> [aDataType.name.toLowerFirst()/]s);
	List<[aDataType.name/]> get[aDataType.name.toUpperFirst()/]();
	[aDataType.name/] create[aDataType.name/]();
	int getIndex([aDataType.name.toUpperFirst()/] [aDataType.name.toLowerFirst()/]);
[/if]
[/let]
[/if]
[/for]
}
[/file]
[/template]


