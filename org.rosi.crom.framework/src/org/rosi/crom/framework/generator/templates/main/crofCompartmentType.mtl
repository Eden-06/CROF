[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateCompartmentType.
 */]
[module crofCompartmentType('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::universalQueries/]
[import org::rosi::crom::framework::generator::templates::main::universalTemplates/]
[import org::rosi::crom::framework::generator::templates::main::crofRoleType/]
[import org::rosi::crom::framework::generator::templates::main::crofRelationship/]


[**
 * The documentation of the template generateCompartmentType.
 * @param aDataType
 */]

[template public crofCompartmentType(aCompartmentType : CompartmentType, aModel : Model)]
[file (getFolderPath() +'/crof/Crof'+ aCompartmentType.name.toUpperFirst()+'.java', false, 'UTF-8')]
package [getPackagePath()/].crof;

import java.util.List;
import java.util.ArrayList;


public class Crof[aCompartmentType.name.toUpperFirst()/][addExtends(aCompartmentType,aModel.relations)/]{	
	[crofFields(aCompartmentType.attributes)/]
	[crofProperties(aCompartmentType.attributes)/]	
	[roleTypeAttributes(aCompartmentType, aModel.relations)/] 
	[relationAttributes(aCompartmentType, aModel.relations)/]
	[for(aRelationship:Relationship|aCompartmentType.relationships)]
	[crofRelationship(aRelationship)/]
	[relationshipAttributes(aRelationship)/]
	[/for]
}
[crofRoleType(aCompartmentType, aModel.relations)/]
[/file]
[/template]

[template private addExtends(aCompartmentType : CompartmentType,relations : Set(Relation)) post(replaceAll('\n',''))]
[if(hasSuper(aCompartmentType,relations))]
[let superCompartmentType:CompartmentType=getSuper(aCompartmentType,relations)]
 extends Crof[superCompartmentType.name.toUpperFirst()/]
[/let]
[/if]
[/template]

[template private roleTypeAttributes(aCompartmentType : CompartmentType,relations : Set(Relation))]
[for(ar:AbstractRole|aCompartmentType.parts.role)]
[if(ar.oclIsKindOf(RoleType))]
[roleTypeAttributesFunctions(ar.oclAsType(RoleType))/]
[elseif(ar.oclIsKindOf(RoleGroup))]
[let roleTypes:Set(RoleType)=getOwnedRoles(ar.oclAsType(RoleGroup))]
[for(aRoleType:RoleType|roleTypes)]
[roleTypeAttributesFunctions(aRoleType)/]
[/for]
[/let]
[else]
something wrong in rtModel.mtl line 21.
[/if]
[/for]
[/template]

[template private roleTypeAttributesFunctions(aRoleType : RoleType)]
List<Crof[aRoleType.name.toUpperFirst()/]> crof[aRoleType.name.toUpperFirst()/]s=new ArrayList<Crof[aRoleType.name.toUpperFirst()/]>();

public void setCrof[aRoleType.name.toUpperFirst()/]s(List<Crof[aRoleType.name.toUpperFirst()/]> crof[aRoleType.name.toUpperFirst()/]s){
	this.crof[aRoleType.name.toUpperFirst()/]s=crof[aRoleType.name.toUpperFirst()/]s;
}
public List<Crof[aRoleType.name.toUpperFirst()/]> getCrof[aRoleType.name.toUpperFirst()/]s(){
	return crof[aRoleType.name.toUpperFirst()/]s;
}
[/template]

[template private relationAttributes(aCompartmentType : CompartmentType,relations : Set(Relation))]
[for(ar:AbstractRole|aCompartmentType.parts.role)]
[if(ar.oclIsKindOf(RoleType))]
[for(aType:Type|getPlayers(ar.oclAsType(RoleType),relations))]
[relationAttributesFunctions(aType,ar.oclAsType(RoleType),aCompartmentType.relationships,aCompartmentType.constraints,relations)/]
[/for]
[elseif(ar.oclIsKindOf(RoleGroup))]
[let roleTypes:Set(RoleType)=getOwnedRoles(ar.oclAsType(RoleGroup))]
[for(aRoleType:RoleType|roleTypes)]
[for(aType:Type|getPlayers(aRoleType,relations))]
[relationAttributesFunctions(aType,aRoleType,aCompartmentType.relationships,aCompartmentType.constraints,relations)/]
[/for]
[/for]
[/let]
[else]
something wrong in rtModel.mtl line 21.
[/if]
[/for]
[/template]

[template private relationAttributesFunctions(aType:Type,aRoleType : RoleType,relationships:OrderedSet(Relationship),constraints:OrderedSet(Constraint),relations:Set(Relation))]
List<Crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]> crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s=new ArrayList<Crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]>();

public void setCrof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s(List<Crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]> crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s){
	this.crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s=crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s;
}
public List<Crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]> getCrof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s(){
	return crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s;
}
[/template]

[template private relationshipAttributes(aRelationship : Relationship) ]
List<Crof[aRelationship.name.toUpperFirst()/]> crof[aRelationship.name.toUpperFirst()/]=new ArrayList<Crof[aRelationship.name.toUpperFirst()/]>();

public void setCrof[aRelationship.name.toUpperFirst()/](List<Crof[aRelationship.name.toUpperFirst()/]> crof[aRelationship.name.toUpperFirst()/]){
	this.crof[aRelationship.name.toUpperFirst()/]=crof[aRelationship.name.toUpperFirst()/];
}
public List<Crof[aRelationship.name.toUpperFirst()/]> getCrof[aRelationship.name.toUpperFirst()/](){
	return crof[aRelationship.name.toUpperFirst()/];
}
[/template]





