[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateEnum.
 */]
[module deserializerGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::generalQueries/]

[**
 * The documentation of the template generateDataType.
 * @param aDataType
 */]

[template public deserializerGen(aModel : Model)]
[file (getFolderPath() +'/util/Deserializer.java', false, 'UTF-8')]
package [getPackagePath()/].util;

import java.util.ArrayList;
import java.util.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;

import com.google.gson.Gson;

import [getPackagePath()/].*;
import [getPackagePath()/].impl.*;
import [getPackagePath()/].model.*;

public class Deserializer{
	private String filePath="./json/model.croj";
	private CrofModel model;
	private Factory factory=Factory.INSTANCE;

	public Deserializer() {
		model=new CrofModel();
		factory.reset();
	}
	[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
	public void exchange[aCompartmentType.name.toUpperFirst()/](List<Crof[aCompartmentType.name.toUpperFirst()/]> crof[aCompartmentType.name.toUpperFirst()/]s){
		for(int i=0;i<crof[aCompartmentType.name.toUpperFirst()/]s.size();i++) {
			[aCompartmentType.name.toUpperFirst()/] [aCompartmentType.name.toLowerFirst()/]=factory.create[aCompartmentType.name.toUpperFirst()/]();
			[for(aAttribute:Attribute|aCompartmentType.attributes)]
			[aCompartmentType.name.toLowerFirst()/].set[aAttribute.name.toUpperFirst()/](crof[aCompartmentType.name.toUpperFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
			[/for]
		}
	}
	[exchangeRelations(aCompartmentType,aModel.relations)/]
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
	public void exchange[aNaturalType.name.toUpperFirst()/](List<Crof[aNaturalType.name.toUpperFirst()/]> crof[aNaturalType.name.toUpperFirst()/]s){
		for(int i=0;i<crof[aNaturalType.name.toUpperFirst()/]s.size();i++) {
			[aNaturalType.name.toUpperFirst()/] [aNaturalType.name.toLowerFirst()/]=factory.create[aNaturalType.name.toUpperFirst()/]();
			[for(aAttribute:Attribute|aNaturalType.attributes)]
			[aNaturalType.name.toLowerFirst()/].set[aAttribute.name.toUpperFirst()/](crof[aNaturalType.name.toUpperFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
			[/for]
			[superType(aNaturalType, aModel.relations)/]
		}
	}
[/let]
[elseif(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(filtJavaType(aDataType))]
	public void exchange[aDataType.name.toUpperFirst()/](List<Crof[aDataType.name.toUpperFirst()/]> crof[aDataType.name.toUpperFirst()/]s){
		for(int i=0;i<crof[aDataType.name.toUpperFirst()/]s.size();i++) {
			[aDataType.name.toUpperFirst()/] [aDataType.name.toLowerFirst()/]=factory.create[aDataType.name.toUpperFirst()/]();
			[for(aAttribute:Attribute|aDataType.attributes)]
			[aDataType.name.toLowerFirst()/].set[aAttribute.name.toUpperFirst()/](crof[aDataType.name.toUpperFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
			[/for]
			[superType(aDataType, aModel.relations)/]
		}
	}
[/if]
[/let]
[/if]
[/for]
	public void fromJson(String filePath) {
        File file = new File(this.filePath);
        BufferedReader reader = null;
        String str="";
		try {
			reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
			String line = reader.readLine();
            do {  
            		str+=line+"\n";
            		line = reader.readLine();
            }  while(line != null);
		} catch (IOException e) {
			e.printStackTrace();
		} finally {  
            try {  
                if(reader != null){  
                	reader.close();  
                }  
            } catch (IOException e) {  
                e.printStackTrace();  
            }  
        }  
		str=str.trim();
		this.model= new Gson().fromJson(str,CrofModel.class);
		if(!model.model.equals("[getPackagePath()/]")){
			System.out.println("wrong model");
			return;
		}
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
		List<Crof[aCompartmentType.name.toUpperFirst()/]> crof[aCompartmentType.name.toUpperFirst()/]s=model.getCrof[aCompartmentType.name.toUpperFirst()/]s();
		exchange[aCompartmentType.name.toUpperFirst()/](crof[aCompartmentType.name.toUpperFirst()/]s);
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
		List<Crof[aNaturalType.name.toUpperFirst()/]> crof[aNaturalType.name.toUpperFirst()/]s=model.getCrof[aNaturalType.name.toUpperFirst()/]s();
		exchange[aNaturalType.name.toUpperFirst()/](crof[aNaturalType.name.toUpperFirst()/]s);
[/let]
[elseif(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(filtJavaType(aDataType))]
		List<Crof[aDataType.name.toUpperFirst()/]> crof[aDataType.name.toUpperFirst()/]s=model.getCrof[aDataType.name.toUpperFirst()/]s();
		exchange[aDataType.name.toUpperFirst()/](crof[aDataType.name.toUpperFirst()/]s);
[/if]
[/let]
[/if]
[/for]
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
		for(int i = 0; i<crof[aCompartmentType.name.toUpperFirst()/]s.size(); i++){
			exchange[aCompartmentType.name.toUpperFirst()/](crof[aCompartmentType.name.toUpperFirst()/]s.get(i));
		}
[/let]
[/if]
[/for]
	}
}
[/file]
[/template]

[template public exchangeRelations(aCompartmentType:CompartmentType, relations:Set(Relation))]
public void exchange[aCompartmentType.name.toUpperFirst()/](Crof[aCompartmentType.name.toUpperFirst()/] crof[aCompartmentType.name.toUpperFirst()/]) {
	[aCompartmentType.name.toUpperFirst()/] [aCompartmentType.name.toLowerFirst()/]=((List<[aCompartmentType.name.toUpperFirst()/]>)factory.getInstances().get(Types.[aCompartmentType.name.toUpper()/])).get(model.getCrof[aCompartmentType.name.toUpperFirst()/]s().indexOf(crof[aCompartmentType.name.toUpperFirst()/]));
[for(ar:AbstractRole | aCompartmentType.parts.role)]
[if(ar.oclIsKindOf(RoleType))]
[for(aType:Type|getPlayers(ar.oclAsType(RoleType),relations))]
	[exchangeRelations(aCompartmentType, ar.oclAsType(RoleType), aType)/]
[/for]
[elseif(ar.oclIsKindOf(RoleGroup))]
[let roleTypes:Set(RoleType)=getAllRoleTypes(ar.oclAsType(RoleGroup))]
[for(aRoleType:RoleType|roleTypes)]
[for(aType:Type|getPlayers(aRoleType,relations))]
	[exchangeRelations(aCompartmentType, aRoleType, aType)/]
[/for]
[/for]
[/let]
[else]
something wrong in rtModelGen.mtl line 21.
[/if]
[/for]
[for(aRelationship:Relationship|aCompartmentType.relationships)]
	List<Crof[aRelationship.name.toUpperFirst()/]> crof[aRelationship.name.toUpperFirst()/]s = crof[aCompartmentType.name.toUpperFirst()/].getCrof[aRelationship.name.toUpperFirst()/]();
	for(int i=0;i<crof[aRelationship.name.toUpperFirst()/]s.size();i++){
		Crof[aRelationship.name.toUpperFirst()/] crof[aRelationship.name.toUpperFirst()/]=crof[aRelationship.name.toUpperFirst()/]s.get(i);
		[exchangeRelationship(aRelationship,relations)/]
	}
[/for]
}
[/template]

[template public exchangeRelations(aCompartmentType : CompartmentType, aRoleType : RoleType, aType:Type)]
List<Crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]> crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s=crof[aCompartmentType.name.toUpperFirst()/].getCrof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s();
List<[aCompartmentType.name.toUpperFirst()/]Impl.[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]> [aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/]s=new ArrayList<[aCompartmentType.name.toUpperFirst()/]Impl.[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]>();
for(int i=0;i<crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s.size();i++) {
	[aCompartmentType.name.toUpperFirst()/]Impl.[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/] [aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/]=([aCompartmentType.name.toUpperFirst()/]Impl.[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/])factory.bind[aRoleType.name.toUpperFirst()/]([aCompartmentType.name.toLowerFirst()/], ((List<[aType.name.toUpperFirst()/]>)factory.getInstances().get(Types.[aType.name.toUpper()/])).get(crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s.get(i).getPlayerPosition()));
[for(aAttribute:Attribute|aRoleType.attributes)]
	[aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/](crof[aCompartmentType.name.toUpperFirst()/].getCrof[aRoleType.name.toUpperFirst()/]s().get(crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s.get(i).getPlayedPosition()).get[aAttribute.name.toUpperFirst()/]());
[/for]
	[aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/]s.add([aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/]);
}
[/template]

[template private superType(aDataType : DataType, relations : Set(Relation))]
[if(hasSuper(aDataType,relations))]
[let superDataType:DataType=getSuper(aDataType,relations)]
[for(aAttribute:Attribute|superDataType.attributes)]
[aDataType.name.toLowerFirst()/].set[aAttribute.name.toUpperFirst()/](crof[aDataType.name.toUpperFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
[/for]
[superType(superDataType,relations)/]
[/let]
[/if]
[/template]

[template private superType(aNaturalType : NaturalType, relations : Set(Relation))]
[if(hasSuper(aNaturalType,relations))]
[let superNaturalType:NaturalType=getSuper(aNaturalType,relations)]
[for(aAttribute:Attribute|superNaturalType.attributes)]
[aNaturalType.name.toLowerFirst()/].set[aAttribute.name.toUpperFirst()/](crof[aNaturalType.name.toUpperFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
[/for]
[superType(superNaturalType,relations)/]
[/let]
[/if]
[/template]


[template private exchangeRelationship(aRelationship : Relationship,relations:Set(Relation))]
[let first:RoleType=aRelationship.first.holder]
[let second:RoleType=aRelationship.second.holder]
[for(firstPlayer:Type|getPlayers(first,relations))]
[for(secondPlayer:Type|getPlayers(second,relations))]
if(crof[aRelationship.name.toUpperFirst()/].getFirst().equals("[firstPlayer.name.toUpperFirst()/][first.name.toUpperFirst()/]") && crof[aRelationship.name.toUpperFirst()/].getSecond().equals("[secondPlayer.name.toUpperFirst()/][second.name.toUpperFirst()/]")){
	[firstPlayer.name.toLower()/][first.name.toUpperFirst()/]s.get(crof[aRelationship.name.toUpperFirst()/].getFirstPosition()).add[aRelationship.name.toUpperFirst()/]([secondPlayer.name.toLower()/][second.name.toUpperFirst()/]s.get(crof[aRelationship.name.toUpperFirst()/].getSecondPosition()));
}
[/for]
[/for]
[/let]
[/let]
[/template]




