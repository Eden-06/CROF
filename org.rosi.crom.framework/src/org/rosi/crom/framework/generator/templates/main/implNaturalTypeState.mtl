[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateNaturalType.
 */]
[module implNaturalTypeState('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::universalQueries/]
[import org::rosi::crom::framework::generator::templates::main::universalTemplates/]

[**
 * The documentation of the template generateNaturalType.
 * @param aNaturalType
 */]

[template public implNaturalTypeState(aNaturalType : NaturalType,aModel : Model)]
[file (getFolderPath() +'/impl/'+ aNaturalType.name.toUpperFirst()+'State.java', false, 'UTF-8')]
package [getPackagePath()/].impl;

import java.util.List;
import java.util.ArrayList;

import [getPackagePath()/].*;

public class [aNaturalType.name.toUpperFirst()/]State[extendsByNaturalTypeState(aNaturalType,aModel.relations)/]{
	[fieldsByNaturalTypeState(aNaturalType,aModel.relations)/]
[if(not hasSuper(aNaturalType,aModel.relations))]
	public Object compoundObject;
[/if]
}
[/file]
[/template]

[template private extendsByNaturalTypeState(aNaturalType : NaturalType,relations : Set(Relation)) post(replaceAll('\n',''))]
[let superNaturalType:NaturalType=getSuper(aNaturalType,relations)]
[if(not superNaturalType->isEmpty())]
 extends [superNaturalType.name.toUpperFirst()/]State
[/if]
[/let]
[/template]

[template private fieldsByNaturalTypeState(aNaturalType : NaturalType,relations : Set(Relation))]
[publicFields(aNaturalType.attributes)/]
[roleFieldByNaturalTypeState(aNaturalType,relations)/]
[/template]

[template private roleFieldByNaturalTypeState(aNaturalType : NaturalType,relations : Set(Relation)) post (replaceAll('\t', '').trim())]
[let otherRoleTypes : Set(RoleType) = getAllSuperTypePlayedRoles(aNaturalType,relations)]
[let roleTypes : Set(RoleType) = getRoles(aNaturalType,relations)]
[for(aRoleType:RoleType | roleTypes)]
[if(not hasThisRole(aRoleType,otherRoleTypes))]
transient List<[getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/]> [getOwner(aRoleType).name.toLowerFirst()/][aRoleType.name.toUpperFirst()/]s=new ArrayList<[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/]>();
[/if]
[/for]
[/let]
[/let]
[/template]


[comment][template private superFieldsByNaturalTypeState(aNaturalType : NaturalType,relations : Set(Relation))]
[if(hasSuper(aNaturalType,relations))]
[let superNaturalType:NaturalType=getSuper(aNaturalType,relations)]
[superFieldsByNaturalTypeState(superNaturalType,relations)/]
[publicFields(superNaturalType.attributes)/]
[/let]
[/if]
[/template][/comment]






