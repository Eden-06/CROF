[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateNaturalType.
 */]
[module interfaceNaturalTypeGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::generalQueries/]
[import org::rosi::crom::framework::generator::templates::main::generalTemplates/]

[**
 * The documentation of the template generateNaturalType.
 * @param aNaturalType
 */]
[template public interfaceNaturalTypeGen(aNaturalType : NaturalType,aModel : Model)]

[file (getFolderPath() +'/'+ aNaturalType.name.toUpperFirst()+'.java', false, 'UTF-8')]
package [getPackagePath()/];

import java.util.List;

public interface [aNaturalType.name.toUpperFirst()/][createExtends(aNaturalType,aModel.relations)/]{

	
	[interfaceProperties(aNaturalType.attributes)/]
	[interFaceOperations(aNaturalType.operations)/]
[comment]	[playerOperationsNaturalTypeInterface(aNaturalType,aModel.relations)/][/comment]
	[playerOperations(aNaturalType,aModel.relations)/]
	[aNaturalType.name/] getCompoundObject();
	boolean isSame(Object object);
}
[/file]
[/template]

[template private createExtends(aNaturalType : NaturalType,relations : Set(Relation)) post(replaceAll('\n',''))]
[if(hasSuper(aNaturalType,relations))]
[let superNaturalType:NaturalType=getSuper(aNaturalType,relations)]
 extends [superNaturalType.name.toUpperFirst()/]
[/let]
[/if]
[/template]





[template private playerOperations(aNaturalType : NaturalType,relations : Set(Relation))]
[let roleTypes:Set(RoleType)=getAllRoles(aNaturalType,relations)]
[for(aRoleType:RoleType|roleTypes)]
boolean has[getOwner(aRoleType).name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/]);
[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/] get[getOwner(aRoleType).name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/]);
List<[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/]> get[getOwner(aRoleType).name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s();
boolean add[getOwner(aRoleType).name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/] [aRoleType.name.toLowerFirst()/]);
boolean remove[getOwner(aRoleType).name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/]);
[/for]
[/let]
[/template]


[comment][template private superOperationsNaturalTypeInterface(aNaturalType : NaturalType,relations : Set(Relation)) post(replaceAll('\n',''))]
[if(hasSuper(aNaturalType,relations))]
[let superNaturalType:NaturalType=getSuper(aNaturalType,relations)]
[operationsNaturalTypeInterface(superNaturalType,relations)/]
[/let]
[/if]
[attributesState(aNaturalType.attributes)/]
[/template]


[template private operationsNaturalTypeInterface(aNaturalType : NaturalType,relations : Set(Relation))]
[if(not hasSuper(aNaturalType,relations))]
[playerOperationsNaturalTypeInterface(aNaturalType,relations)/]
[/if]
[attributesState(aNaturalType.attributes)/]
[/template][/comment]

[comment][template private playerOperationsNaturalTypeInterface(aNaturalType : NaturalType,relations : Set(Relation))]
[comment]boolean isSame([aNaturalType.name.toUpperFirst()/] [aNaturalType.name.toLowerFirst()/]);[/comment]
[comment]boolean isSame(Object object);[/comment]
[let roleTypes:Set(RoleType)=getRoleTypes(aNaturalType,getAllFulfillments(relations))]
[for(aRoleType:RoleType|roleTypes)]
boolean has[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/]);
[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/] get[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/]);
List<[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/]> get[aRoleType.name.toUpperFirst()/]s();
[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/] add[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/],[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/] [aRoleType.name.toLowerFirst()/]);
[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/] remove[aRoleType.name.toUpperFirst()/]([getOwner(aRoleType).name.toUpperFirst()/] [getOwner(aRoleType).name.toLowerFirst()/],[getOwner(aRoleType).name.toUpperFirst()/].[aRoleType.name.toUpperFirst()/] [aRoleType.name.toLowerFirst()/]);
[/for]
[/let]
[/template][/comment]


