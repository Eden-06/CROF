[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateEnum.
 */]
[module serializerGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::generalQueries/]

[**
 * The documentation of the template generateDataType.
 * @param aDataType
 */]

[template public serializerGen(aModel : Model)]
[file (getFolderPath() +'/util/Serializer.java', false, 'UTF-8')]
package [getPackagePath()/].util;

import java.util.List;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
[comment]import java.util.Map;[/comment]

import com.google.gson.Gson;

import [getPackagePath()/].*;
import [getPackagePath()/].impl.*;
import [getPackagePath()/].crof.*;

public class Serializer{
[comment]	private String filePath="./json/model.croj";[/comment]
	private CrofModel crofModel=new CrofModel();
	private Model model;

[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(notJavaType(aDataType))]
	public void exchange[aDataType.name.toUpperFirst()/](List<[aDataType.name.toUpperFirst()/]> [aDataType.name.toLowerFirst()/]s){
		List<Crof[aDataType.name.toUpperFirst()/]> crof[aDataType.name.toUpperFirst()/]s=new ArrayList<Crof[aDataType.name.toUpperFirst()/]>();
		for(int i=0;i<[aDataType.name.toLowerFirst()/]s.size();i++) {
			Crof[aDataType.name.toUpperFirst()/] crof[aDataType.name.toUpperFirst()/]=new Crof[aDataType.name.toUpperFirst()/]();
[for(aAttribute:Attribute|aDataType.attributes)]
[if(notJavaType(aAttribute.type))]
			int position[aAttribute.name.toUpperFirst()/]=model.getIndex([aDataType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
			crof[aDataType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]("[aAttribute.type.name.toUpperFirst()/]@"+position[aAttribute.name.toUpperFirst()/]);
[else]
			crof[aDataType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]([aDataType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
[/if]
[/for]
			[superType(aDataType,aDataType,aModel.relations)/]
			crof[aDataType.name.toUpperFirst()/]s.add(crof[aDataType.name.toUpperFirst()/]);
		}
		crofModel.setCrof[aDataType.name.toUpperFirst()/]s(crof[aDataType.name.toUpperFirst()/]s);
	}	
[/if]
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
	public void exchange[aNaturalType.name.toUpperFirst()/](List<[aNaturalType.name.toUpperFirst()/]> [aNaturalType.name.toLowerFirst()/]s){
		List<Crof[aNaturalType.name.toUpperFirst()/]> crof[aNaturalType.name.toUpperFirst()/]s=new ArrayList<Crof[aNaturalType.name.toUpperFirst()/]>();
		for(int i=0;i<[aNaturalType.name.toLowerFirst()/]s.size();i++) {
			Crof[aNaturalType.name.toUpperFirst()/] crof[aNaturalType.name.toUpperFirst()/]=new Crof[aNaturalType.name.toUpperFirst()/]();
[for(aAttribute:Attribute|aNaturalType.attributes)]
[if(notJavaType(aAttribute.type))]
			int position[aAttribute.name.toUpperFirst()/]=model.getIndex([aNaturalType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
			crof[aNaturalType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]("[aAttribute.type.name.toUpperFirst()/]@"+position[aAttribute.name.toUpperFirst()/]);
[else]
			crof[aNaturalType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]([aNaturalType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
[/if]
[/for]
			[superType(aNaturalType,aNaturalType,aModel.relations)/]
			crof[aNaturalType.name.toUpperFirst()/]s.add(crof[aNaturalType.name.toUpperFirst()/]);
		}
		crofModel.setCrof[aNaturalType.name.toUpperFirst()/]s(crof[aNaturalType.name.toUpperFirst()/]s);
	}
[/let]
[elseif(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
	public void exchange[aCompartmentType.name.toUpperFirst()/](List<[aCompartmentType.name.toUpperFirst()/]> [aCompartmentType.name.toLowerFirst()/]s){
		List<Crof[aCompartmentType.name.toUpperFirst()/]> crof[aCompartmentType.name.toUpperFirst()/]s=new ArrayList<Crof[aCompartmentType.name.toUpperFirst()/]>();
		for(int i=0;i<[aCompartmentType.name.toLowerFirst()/]s.size();i++) {
			Crof[aCompartmentType.name.toUpperFirst()/] crof[aCompartmentType.name.toUpperFirst()/]=new Crof[aCompartmentType.name.toUpperFirst()/]();
[for(aAttribute:Attribute|aCompartmentType.attributes)]
[if(notJavaType(aAttribute.type))]
			int position[aAttribute.name.toUpperFirst()/]=model.getIndex([aCompartmentType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
			crof[aCompartmentType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]("[aAttribute.type.name.toUpperFirst()/]@"+position[aAttribute.name.toUpperFirst()/]);
[else]
			crof[aCompartmentType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]([aCompartmentType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
[/if]
[/for]
			crof[aCompartmentType.name.toUpperFirst()/]s.add(crof[aCompartmentType.name.toUpperFirst()/]);
		}
		crofModel.setCrof[aCompartmentType.name.toUpperFirst()/]s(crof[aCompartmentType.name.toUpperFirst()/]s);
	}

	[exchangeRelations(aCompartmentType,aModel.relations)/]
[/let]
[/if]
[/for]
	public void toJson(Model model) {
		this.model=model;
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(DataType))]
[let aDataType:DataType=aModelElement.oclAsType(DataType)]
[if(notJavaType(aDataType))]
[comment]		List<[aDataType.name.toUpperFirst()/]> [aDataType.name.toLowerFirst()/]s=(ArrayList<[aDataType.name.toUpperFirst()/]>)model.get[aDataType.name.toUpperFirst()/]();[/comment]
[comment]		exchange[aDataType.name.toUpperFirst()/]([aDataType.name.toLowerFirst()/]s);[/comment]
		exchange[aDataType.name.toUpperFirst()/](model.get[aDataType.name.toUpperFirst()/]());
[/if]
[/let]
[elseif(aModelElement.oclIsKindOf(NaturalType))]
[let aNaturalType:NaturalType=aModelElement.oclAsType(NaturalType)]
[comment]		List<[aNaturalType.name.toUpperFirst()/]> [aNaturalType.name.toLowerFirst()/]s=(ArrayList<[aNaturalType.name.toUpperFirst()/]>)model.get[aNaturalType.name.toUpperFirst()/]();[/comment]
[comment]		exchange[aNaturalType.name.toUpperFirst()/]([aNaturalType.name.toLowerFirst()/]s);[/comment]
		exchange[aNaturalType.name.toUpperFirst()/](model.get[aNaturalType.name.toUpperFirst()/]());
[/let]
[elseif(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
		List<[aCompartmentType.name.toUpperFirst()/]> [aCompartmentType.name.toLowerFirst()/]s=model.get[aCompartmentType.name.toUpperFirst()/]();
		exchange[aCompartmentType.name.toUpperFirst()/]([aCompartmentType.name.toLowerFirst()/]s);
[/let]
[/if]
[/for]
[for (aModelElement : ModelElement | aModel.elements)]
[if(aModelElement.oclIsKindOf(CompartmentType))]
[let aCompartmentType:CompartmentType=aModelElement.oclAsType(CompartmentType)]
		for(int i = 0; i<[aCompartmentType.name.toLowerFirst()/]s.size(); i++){
			exchange[aCompartmentType.name.toUpperFirst()/]([aCompartmentType.name.toLowerFirst()/]s.get(i));
[comment]			exchange[aCompartmentType.name.toUpperFirst()/]([aCompartmentType.name.toLowerFirst()/]s.get(i),i);[/comment]
		}
[/let]
[/if]
[/for]
		String str = new Gson().toJson(crofModel,CrofModel.class);
		BufferedWriter writer = null;
		String filePath="./instance/"+model.getModelName()+"_1.croj";
        File file = new File(filePath);
[comment]        //如果文件不存在，则新建一个  
//        if(!file.exists()){  
//            try {  
//                file.createNewFile();  
//            } catch (IOException e) {  
//               System.out.println(e);
//            }  
//        }  [/comment]
        
        while(file.exists()) {
        		String num=filePath.substring(filePath.lastIndexOf("_")+1, filePath.lastIndexOf("."));
        		int number=Integer.parseInt(num)+1;
        		filePath="./instance/"+model.getModelName()+"_"+number+".croj";
        		file = new File(filePath);
        }
        try {  
            file.createNewFile();  
        } catch (IOException e) {  
           System.out.println(e);
        }
        //写入  
        try {  
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file,false), "UTF-8"));  
            writer.write(str);  
        } catch (IOException e) {  
            e.printStackTrace();  
        }finally {  
            try {  
                if(writer != null){  
                    writer.close();  
                }  
            } catch (IOException e) {  
                e.printStackTrace();  
            }  
        }
	}
}
[/file]
[/template]

[template private superType(targetDataType : DataType, thisDataType : DataType,relations : Set(Relation))]
[if(hasSuper(targetDataType,relations))]
[let attributes:Set(Attribute)=getSuperAttributes(targetDataType.attributes,getAllSuperAttributes(targetDataType,relations))]
[for(aAttribute:Attribute|attributes)]
[if(notJavaType(aAttribute.type))]
int position[aAttribute.name.toUpperFirst()/]=model.getIndex([targetDataType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
crof[targetDataType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]("[aAttribute.type.name.toUpperFirst()/]@"+position[aAttribute.name.toUpperFirst()/]);
[else]
crof[targetDataType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]([targetDataType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
[/if]
[/for]
[/let]
[/if]
[/template]

[template private superType(targetNaturalType : NaturalType,thisNaturalType : NaturalType, relations : Set(Relation))]
[if(hasSuper(thisNaturalType,relations))]
[let attributes:Set(Attribute)=getSuperAttributes(targetNaturalType.attributes,getAllSuperAttributes(targetNaturalType,relations))]
[for(aAttribute:Attribute|attributes)]
[if(notJavaType(aAttribute.type))]
int position[aAttribute.name.toUpperFirst()/]=model.getIndex([targetNaturalType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
crof[targetNaturalType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]("[aAttribute.type.name.toUpperFirst()/]@"+position[aAttribute.name.toUpperFirst()/]);
[else]
crof[targetNaturalType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]([targetNaturalType.name.toLowerFirst()/]s.get(i).get[aAttribute.name.toUpperFirst()/]());
[/if]
[/for]
[/let]
[/if]
[/template]


[template public exchangeRelations(aCompartmentType:CompartmentType, relations:Set(Relation))]
public void exchange[aCompartmentType.name.toUpperFirst()/]([aCompartmentType.name.toUpperFirst()/] [aCompartmentType.name.toLowerFirst()/]) {
[comment]public void exchange[aCompartmentType.name.toUpperFirst()/]([aCompartmentType.name.toUpperFirst()/] [aCompartmentType.name.toLowerFirst()/], int index) {[/comment]
	Crof[aCompartmentType.name.toUpperFirst()/] crof[aCompartmentType.name.toUpperFirst()/]= crofModel.getCrof[aCompartmentType.name.toUpperFirst()/]s().get(model.getIndex([aCompartmentType.name.toLowerFirst()/]));
[comment]	Crof[aCompartmentType.name.toUpperFirst()/] crof[aCompartmentType.name.toUpperFirst()/]= crofModel.getCrof[aCompartmentType.name.toUpperFirst()/]s().get(index);[/comment]
	[aCompartmentType.name.toUpperFirst()/]Impl [aCompartmentType.name.toLowerFirst()/]Impl=([aCompartmentType.name.toUpperFirst()/]Impl)[aCompartmentType.name.toLowerFirst()/];
[for(ar:AbstractRole | aCompartmentType.parts.role)]
[if(ar.oclIsKindOf(RoleType))]
[for(aType:Type|getPlayers(ar.oclAsType(RoleType),relations))]
	[exchangeRelations(aCompartmentType, ar.oclAsType(RoleType), aType,relations)/]
[/for]
[elseif(ar.oclIsKindOf(RoleGroup))]
[let roleTypes:Set(RoleType)=getOwnedRoles(ar.oclAsType(RoleGroup))]
[for(aRoleType:RoleType|roleTypes)]
[for(aType:Type|getPlayers(aRoleType,relations))]
	[exchangeRelations(aCompartmentType, aRoleType, aType,relations)/]
[/for]
[/for]
[/let]
[else]
something wrong in rtModelGen.mtl line 21.
[/if]
[/for]
[for(aRelationship:Relationship|aCompartmentType.relationships)]
	//List<Crof[aRelationship.name.toUpperFirst()/]> crof[aRelationship.name.toUpperFirst()/]s = new ArrayList<Crof[aRelationship.name.toUpperFirst()/]>();
	[exchangeRelationship(aRelationship,relations)/]
[/for]
}
[/template]

[template private exchangeRelations(aCompartmentType : CompartmentType, aRoleType : RoleType, aType:Type,relations:Set(Relation))]
List<[aCompartmentType.name.toUpperFirst()/]Impl.[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]> [aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/]s=new ArrayList<[aCompartmentType.name.toUpperFirst()/]Impl.[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]>();
for(int i=0;i<[aCompartmentType.name.toLowerFirst()/]Impl.get[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s().size();i++) {
[aCompartmentType.name.toUpperFirst()/]Impl.[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/] [aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/]=([aCompartmentType.name.toUpperFirst()/]Impl.[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/])[aCompartmentType.name.toLowerFirst()/]Impl.get[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s().get(i);
[aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/]s.add([aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/]);
Crof[aRoleType.name.toUpperFirst()/] crof[aRoleType.name.toUpperFirst()/]= new Crof[aRoleType.name.toUpperFirst()/]();
[for(aAttribute:Attribute|aRoleType.attributes)]
[if(notJavaType(aAttribute.type))]
int position[aAttribute.name.toUpperFirst()/]=model.getIndex([aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].get[aAttribute.name.toUpperFirst()/]());
crof[aRoleType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]("[aAttribute.type.name.toUpperFirst()/]@"+position[aAttribute.name.toUpperFirst()/]);
[else]
crof[aRoleType.name.toUpperFirst()/].set[aAttribute.name.toUpperFirst()/]([aType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].get[aAttribute.name.toUpperFirst()/]());
[/if]	
[/for]	
List<Crof[aRoleType.name.toUpperFirst()/]> crof[aRoleType.name.toUpperFirst()/]s=crof[aCompartmentType.name.toUpperFirst()/].getCrof[aRoleType.name.toUpperFirst()/]s();
crof[aRoleType.name.toUpperFirst()/]s.add(crof[aRoleType.name.toUpperFirst()/]);
crof[aCompartmentType.name.toUpperFirst()/].setCrof[aRoleType.name.toUpperFirst()/]s(crof[aRoleType.name.toUpperFirst()/]s);
Crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/] crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]=new Crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]();
[if(aType.oclIsKindOf(CompartmentType))]
[findLastSubCompartmentTypePlayer(aType.oclAsType(CompartmentType),aCompartmentType, aRoleType,relations)/]
[elseif(aType.oclIsKindOf(NaturalType))]
[findLastSubNaturalPlayer(aType.oclAsType(NaturalType),aCompartmentType, aRoleType, relations)/]
[else]
[/if]
crof[aCompartmentType.name.toUpperFirst()/].getCrof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]s().add(crof[aType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/]);
}
[/template]



[template private findLastSubNaturalPlayer(superType:NaturalType,aCompartmentType : CompartmentType, aRoleType : RoleType, relations:Set(Relation))]
[if(hasSub(superType,relations))]
[ifLoopExchangeRelation(getLastSub(superType,relations),superType,aCompartmentType,aRoleType,relations)/]
[else]
[playerExchangeRelation( superType,superType,aCompartmentType, aRoleType)/]
[/if]
[/template]
[template private findLastSubCompartmentTypePlayer(superType:CompartmentType,aCompartmentType : CompartmentType, aRoleType : RoleType, relations:Set(Relation))]
[if(hasSub(superType,relations))]
[ifLoopExchangeRelation(getLastSub(superType,relations),superType,aCompartmentType,aRoleType,relations)/]
[else]
[playerExchangeRelation( superType,superType,aCompartmentType, aRoleType)/]
[/if]
[/template]


[template private ifLoopExchangeRelation(subType : NaturalType, targetType : NaturalType, aCompartmentType : CompartmentType, aRoleType : RoleType, relations:Set(Relation))]
[if(hasSuper(subType,relations) and subType<>targetType)]
if([targetType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].getPlayer() instanceof [subType.name.toUpperFirst()/]){
	[playerExchangeRelation( subType,targetType,aCompartmentType, aRoleType)/]
}
else [ifLoopExchangeRelation(getSuper(subType,relations),targetType,aCompartmentType,aRoleType,relations)/]
[else]
{
	[playerExchangeRelation( subType,targetType,aCompartmentType, aRoleType)/]
}
[/if]
[/template]
[template private ifLoopExchangeRelation(subType : CompartmentType, targetType : CompartmentType, aCompartmentType : CompartmentType, aRoleType : RoleType, relations:Set(Relation))]
[if(hasSuper(subType,relations) and subType<>targetType)]
if([targetType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].getPlayer() instanceof [subType.name.toUpperFirst()/]){
	[playerExchangeRelation( subType,targetType,aCompartmentType, aRoleType)/]
}
else [ifLoopExchangeRelation(getSuper(subType,relations),targetType,aCompartmentType,aRoleType,relations)/]
[else]
{
	[playerExchangeRelation( subType,targetType,aCompartmentType, aRoleType)/]
}
[/if]
[/template]

[template private ifCompartmentPlayerExchangeRelation(aCompartmentType : CompartmentType, aRoleType : RoleType,targetType:Type, subType:CompartmentType,relations:Set(Relation))]
if([targetType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].getPlayer() instanceof [subType.name.toUpperFirst()/]){
	[playerExchangeRelation( subType,targetType,aCompartmentType, aRoleType)/]
}
[if(hasSuper(subType,relations))]
[elseifCompartmentPlayerExchangeRelation(aCompartmentType, aRoleType,targetType,getSuper(subType,relations),relations)/]
[/if]
[/template]

[template private ifNaturalPlayerExchangeRelation(aCompartmentType : CompartmentType, aRoleType : RoleType,targetType:Type, subType:NaturalType,relations:Set(Relation))]
if([targetType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].getPlayer() instanceof [subType.name.toUpperFirst()/]){
	[playerExchangeRelation( subType,targetType,aCompartmentType, aRoleType)/]
}
[if(hasSuper(subType,relations))]
[elseifNaturalPlayerExchangeRelation(aCompartmentType, aRoleType,targetType,getSuper(subType,relations),relations)/]
[/if]
[/template]

[template private elseifCompartmentPlayerExchangeRelation(aCompartmentType : CompartmentType, aRoleType : RoleType,targetType:Type, subType:CompartmentType,relations:Set(Relation))]
else if([targetType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].getPlayer() instanceof [subType.name.toUpperFirst()/]){
	[playerExchangeRelation( subType,targetType,aCompartmentType, aRoleType)/]
}
[if(hasSuper(subType,relations))]
[elseifCompartmentPlayerExchangeRelation(aCompartmentType, aRoleType,targetType,getSuper(subType,relations),relations)/]
[/if]
[/template]

[template private elseifNaturalPlayerExchangeRelation(aCompartmentType : CompartmentType, aRoleType : RoleType,targetType:Type, subType:NaturalType,relations:Set(Relation))]
else if([targetType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].getPlayer() instanceof [subType.name.toUpperFirst()/]){
	[playerExchangeRelation( subType,targetType,aCompartmentType, aRoleType)/]
}
[if(hasSuper(subType,relations) and targetType.oclAsType(NaturalType)<>subType)]
[elseifNaturalPlayerExchangeRelation(aCompartmentType, aRoleType,targetType,getSuper(subType,relations),relations)/]
[/if]
[/template]

[template private playerExchangeRelation(subType:Type,targetType:Type,aCompartmentType : CompartmentType, aRoleType : RoleType)]
int playerPosition=model.getIndex(([subType.name.toUpperFirst()/])[targetType.name.toLowerFirst()/][aRoleType.name.toUpperFirst()/].getPlayer());
crof[targetType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/].setPlayer("Crof[subType.name.toUpperFirst()/]@"+playerPosition);			
int playedPosition=crof[aRoleType.name.toUpperFirst()/]s.size()-1;
crof[targetType.name.toUpperFirst()/][aRoleType.name.toUpperFirst()/].setPlayed("Crof[aRoleType.name.toUpperFirst()/]@"+playedPosition);
[/template]



[template private exchangeRelationship(aRelationship : Relationship,relations:Set(Relation))]
[let first:RoleType=aRelationship.first.holder]
[let second:RoleType=aRelationship.second.holder]
[for(firstPlayer:Type|getPlayers(first,relations))]
for(int i=0;i<[firstPlayer.name.toLowerFirst()/][first.name.toUpperFirst()/]s.size();i++){
	[getOwner(first).name.toUpperFirst()/]Impl.[firstPlayer.name.toUpperFirst()/][first.name.toUpperFirst()/] [firstPlayer.name.toLowerFirst()/][first.name.toUpperFirst()/]=([getOwner(first).name.toUpperFirst()/]Impl.[firstPlayer.name.toUpperFirst()/][first.name.toUpperFirst()/])[firstPlayer.name.toLowerFirst()/][first.name.toUpperFirst()/]s.get(i);
	List<[getOwner(first).name.toUpperFirst()/].[second.name.toUpperFirst()/]> [second.name.toLowerFirst()/]s=[firstPlayer.name.toLowerFirst()/][first.name.toUpperFirst()/].get[aRelationship.name.toUpperFirst()/]();
	if(![second.name.toLowerFirst()/]s.isEmpty()) {
		for(int j=0;j<[second.name.toLowerFirst()/]s.size();j++){
			[getOwner(first).name.toUpperFirst()/].[second.name.toUpperFirst()/] [second.name.toLowerFirst()/]=[second.name.toLowerFirst()/]s.get(j);
		[for(secondPlayer:Type|getPlayers(second,relations))]
			if([second.name.toLowerFirst()/] instanceof [getOwner(second).name.toUpperFirst()/]Impl.[secondPlayer.name.toUpperFirst()/][second.name.toUpperFirst()/] && [second.name.toLowerFirst()/].getPlayer().getClass().getName().substring([second.name.toLowerFirst()/].getPlayer().getClass().getName().lastIndexOf(".")+1).equals("[secondPlayer.name.toUpperFirst()/]Impl")){
				[getOwner(second).name.toUpperFirst()/]Impl.[secondPlayer.name.toUpperFirst()/][second.name.toUpperFirst()/] [secondPlayer.name.toLowerFirst()/][second.name.toUpperFirst()/]=([getOwner(second).name.toUpperFirst()/]Impl.[secondPlayer.name.toUpperFirst()/][second.name.toUpperFirst()/])[second.name.toLowerFirst()/];
				Crof[aRelationship.name.toUpperFirst()/] crof[aRelationship.name.toUpperFirst()/]=new Crof[aRelationship.name.toUpperFirst()/]();
				crof[aRelationship.name.toUpperFirst()/].setFirst("[firstPlayer.name.toUpperFirst()/][first.name.toUpperFirst()/]@"+[firstPlayer.name.toLowerFirst()/][first.name.toUpperFirst()/]s.indexOf([firstPlayer.name.toLowerFirst()/][first.name.toUpperFirst()/]));
				crof[aRelationship.name.toUpperFirst()/].setSecond("[secondPlayer.name.toUpperFirst()/][second.name.toUpperFirst()/]@"+[secondPlayer.name.toLowerFirst()/][second.name.toUpperFirst()/]s.indexOf([secondPlayer.name.toLowerFirst()/][second.name.toUpperFirst()/]));
				crof[getOwner(first).name.toUpperFirst()/].getCrof[aRelationship.name.toUpperFirst()/]().add(crof[aRelationship.name.toUpperFirst()/]);
			}
		[/for]	
		}
	}
}
[/for]
[/let]
[/let]
[/template]





