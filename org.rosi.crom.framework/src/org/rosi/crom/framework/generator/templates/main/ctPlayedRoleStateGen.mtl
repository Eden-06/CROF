[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateCompartmentType.
 */]
[module ctPlayedRoleStateGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::util/]
[import org::rosi::crom::framework::generator::templates::main::rtImplGen/]
[import org::rosi::crom::framework::generator::templates::main::rtInterfaceGen/]

[**
 * The documentation of the template generateCompartmentType.
 * @param aDataType
 */]

[template public ctPlayedRoleStateGen(ct : CompartmentType, model:Model)]
[file (getFolderPath() +'/impl/'+ ct.name.toUpperFirst()+'State.java', false, 'UTF-8')]
package [getPackagePath()/].impl;

import java.util.Map;
import java.util.HashMap;

import [getPackagePath()/].*;

public class [ct.name.toUpperFirst()/]State{
	[attributesStateCompartmentType(ct,model.relations)/]
}
[/file]
[/template]


[template private attributesStateCompartmentType(aCompartmentType : CompartmentType,relations : Set(Relation))]
[attributesState(aCompartmentType.attributes)/]
[roleAttributeCompartmentTypeState(aCompartmentType,relations)/]
[/template]




[comment][template private ctStateImpoertBlock(ct : CompartmentType,model : Model) post (replaceAll('\t', '').trim())]
[let roles : Set(AbstractRole) = getRoles(ct,getAllFulfillment(model.relations))]
[if(not roles->isEmpty())]
[for(ar:AbstractRole | roles)]
[if(ar.oclIsKindOf(RoleType))]
import [getPackagePath()/].impl.[getOwner(aRoleType).name/]Impl;
import [getPackagePath()/].impl.[getOwner(aRoleType).name/]Impl.[ct.name/][aRoleType.name/]Impl;
[else]
import [getPackagePath()/].impl.[getCompartmentNameByRoleGroup(ar.oclAsType(RoleGroup),model)/]Impl;
[for(rt:RoleType|ar.oclAsType(RoleGroup).elements)]
import [getPackagePath()/].impl.[getCompartmentNameByRoleGroup(ar.oclAsType(RoleGroup),model)/]Impl.[ct.name/][rt.name/]Impl;
[/for]
[/if]
[/for]
[/if]
[/let]
[/template][/comment]

[template private roleAttributeCompartmentTypeState(aCompartmentType : CompartmentType,relations : Set(Relation)) post (replaceAll('\t', '').trim())]
[let roleTypes : Set(RoleType) = getRoles(aCompartmentType,getAllFulfillments(relations))]
[if(not roleTypes->isEmpty())]
[for(aRoleType:RoleType | roleTypes)]
Map<[getOwner(aRoleType).name/],[getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/]>  [aRoleType.name.toLowerFirst()/]s=new HashMap<[getOwner(aRoleType).name/],[getOwner(aRoleType).name/].[aRoleType.name.toUpperFirst()/]>();
[/for]
[/if]
[/let]
[/template]