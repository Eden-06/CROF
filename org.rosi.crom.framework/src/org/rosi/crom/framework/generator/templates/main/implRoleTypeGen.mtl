[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateNaturalType.
 */]
[module implRoleTypeGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::generalQueries/]
[import org::rosi::crom::framework::generator::templates::main::generalTemplates/]

[**
 * The documentation of the template aRoleTypeImplGen.
 * @param aNaturalType
 */]
[template public implRoleTypeGen(aCompartmentType : CompartmentType, relations : Set(Relation))]
[for(ar:AbstractRole|aCompartmentType.parts.role)]
[if(ar.oclIsKindOf(RoleType))]
[for(aType:Type|getPlayers(ar.oclAsType(RoleType),relations))]
[roleTypeImplGen(aType,ar.oclAsType(RoleType),aCompartmentType.relationships,aCompartmentType.constraints,relations)/]
[/for]
[elseif(ar.oclIsKindOf(RoleGroup))]
[let roleTypes:Set(RoleType)=getAllRoleTypes(ar.oclAsType(RoleGroup))]
[for(aRoleType:RoleType|roleTypes)]
[for(aType:Type|getPlayers(aRoleType,relations))]
[roleTypeImplGen(aType,aRoleType,aCompartmentType.relationships,aCompartmentType.constraints,relations)/]
[/for]
[/for]
[/let]
[else]
something wrong in aRoleTypeImplGen.mtl line 15.
[/if]
[/for]
[/template]

[template private roleTypeImplGen(aType:Type,aRoleType : RoleType,relationships:OrderedSet(Relationship),constraints:OrderedSet(Constraint),relations:Set(Relation))]
public class [aType.name/][aRoleType.name/] extends [aType.name/]Impl implements [aRoleType.name/]{
	[privateFields(aRoleType.attributes)/]

	public [aType.name/][aRoleType.name/](){
[comment]		super();[/comment]
	}
	public [aType.name/][aRoleType.name/]([aType.name/]Impl [aType.name.toLowerFirst()/]Impl){
[comment]		super();[/comment]
		this.state=[aType.name.toLowerFirst()/]Impl.state;
	}
	[overrideProperties(aRoleType.attributes)/]
	[implOperations(aRoleType.operations)/]
	
	@Override
	public [getOwner(aRoleType).name.toUpperFirst()/] getOwner() {
		return [getOwner(aRoleType).name.toUpperFirst()/]Impl.this;
	}
	@Override
	public [aType.name.toUpperFirst()/] getPlayer() {
		return getCompoundObject();
	}
	[relationshipRoleTypeImpl(aRoleType,relationships,constraints)/]

}
[/template]


[template private relationshipRoleTypeImpl(aRoleType : RoleType,relationships:OrderedSet(Relationship),constraints:OrderedSet(Constraint))]
[for(aRelationship:Relationship|getRelationships(aRoleType,relationships))]
[relationshipOptionsImplGen(aRoleType,aRelationship)/]
[/for]
[/template]




[template private relationshipOptionsImplGen(aRoleType : RoleType,aRelationship : Relationship) ]
[let partnerRoleType:RoleType=getPartner(aRoleType,aRelationship)]
@Override
public List<[partnerRoleType.name.toUpperFirst()/]> get[aRelationship.name.toUpperFirst()/](){
	return [aRelationship.name.toLowerFirst()/]Instance.get[partnerRoleType.name.toUpperFirst()/]s(this);
}
@Override
public boolean add[aRelationship.name.toUpperFirst()/]([partnerRoleType.name.toUpperFirst()/] [partnerRoleType.name.toLowerFirst()/]){
[if(aRelationship.first.holder=aRoleType)]
	return [aRelationship.name.toLowerFirst()/]Instance.add(this,[partnerRoleType.name.toLowerFirst()/]);
[else]
	return [aRelationship.name.toLowerFirst()/]Instance.add([partnerRoleType.name.toLowerFirst()/],this);
[/if]
}
[/let]
[/template]

[template private privateAttributeOfRelationships(aRoleType : RoleType,relationships:OrderedSet(Relationship))]
[let newRelationships:Set(Relationship)=getRelationships(aRoleType,relationships)]
[for(aRelationship:Relationship|newRelationships)]
private [aRelationship.name.toUpperFirst()/]Impl [aRelationship.name.toLowerFirst()/]=new [aRelationship.name.toUpperFirst()/]Impl();
[/for]
[/let]
[/template]



