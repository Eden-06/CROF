[comment encoding = UTF-8 /]
[**
 * The documentation of the module relationshipImplGen.
 */]
[module implRelationshipGen('platform:/resource/org.rosi.crom.metamodel/')]
[import org::rosi::crom::framework::generator::templates::main::generalQueries/]

[**
 * The documentation of the template relationshipImplGen.
 * @param aNaturalType
 */]
[template public implRelationshipGen(aCompartmentType : CompartmentType) ]
[for(aConstraint:Constraint|aCompartmentType.constraints)]
[if(aConstraint.oclIsKindOf(Irreflexive))]
[irreflexiveImplGen(aConstraint.oclAsType(Irreflexive))/]
[elseif(aConstraint.oclIsKindOf(Reflexive))]
[reflexiveImplGen(aConstraint.oclAsType(Reflexive))/]
[elseif(aConstraint.oclIsKindOf(Total))]
[totalImplGen(aConstraint.oclAsType(Total))/]
[elseif(aConstraint.oclIsKindOf(Cyclic))]
[cyclicImplGen(aConstraint.oclAsType(Cyclic))/]
[elseif(aConstraint.oclIsKindOf(Acyclic))]
[acyclicImplGen(aConstraint.oclAsType(Acyclic))/]
[else]
[/if]
[/for]

[let relationsships:Set(Relationship)=getRelationshipsWithoutConstraint(aCompartmentType.relationships,aCompartmentType.constraints)]
[for(aRelationship:Relationship|relationsships)]
[relationshipImplGen(aRelationship)/]
[/for]
[/let]
[/template]

[template private relationshipImplGen(aRelationship : Relationship) ]
public class [aRelationship.name.toUpperFirst()/]Impl implements [aRelationship.name.toUpperFirst()/]{
	[relationshipOptionsImplGen(aRelationship)/]
	@Override
	public boolean add([aRelationship.first.holder.name.toUpperFirst()/] [aRelationship.first.holder.name.toLowerFirst()/], [aRelationship.second.holder.name.toUpperFirst()/] [aRelationship.second.holder.name.toLowerFirst()/]){
		return [aRelationship.name/].add(new AbstractMap.SimpleEntry<[aRelationship.first.holder.name.toUpperFirst()/], [aRelationship.second.holder.name.toUpperFirst()/]>([aRelationship.first.holder.name.toLowerFirst()/],[aRelationship.second.holder.name.toLowerFirst()/]));
	}
}
[/template]


[template private irreflexiveImplGen(aIrreflexive : Irreflexive) ]
public class [aIrreflexive.relation.name.toUpperFirst()/]Impl implements [aIrreflexive.relation.name.toUpperFirst()/]{
	[relationshipOptionsImplGen(aIrreflexive.relation)/]
	@Override
	public boolean add([aIrreflexive.relation.first.holder.name.toUpperFirst()/] [aIrreflexive.relation.first.holder.name.toLowerFirst()/], [aIrreflexive.relation.second.holder.name.toUpperFirst()/] [aIrreflexive.relation.second.holder.name.toLowerFirst()/]){
		if([aIrreflexive.relation.first.holder.name.toLowerFirst()/].isSame([aIrreflexive.relation.second.holder.name.toLowerFirst()/]))
			return false;
		return [aIrreflexive.relation.name/].add(new AbstractMap.SimpleEntry<[aIrreflexive.relation.first.holder.name.toUpperFirst()/], [aIrreflexive.relation.second.holder.name.toUpperFirst()/]>([aIrreflexive.relation.first.holder.name.toLowerFirst()/],[aIrreflexive.relation.second.holder.name.toLowerFirst()/]));
	}
}
[/template]
[template private reflexiveImplGen(aReflexive : Reflexive) ]
//TODO reflexivImplGen
[/template]
[template private totalImplGen(aTotal : Total) ]
//TODO totalImplGen
[/template]
[template private cyclicImplGen(aCyclic : Cyclic) ]
//TODO cyclicImplGen
[/template]
[template private acyclicImplGen(aAcyclic : Acyclic) ]
//TODO acyclicImplGen
[/template]

[comment][template private relationshipOptionsImplGen(aRelationship : Relationship) ]
ListMultimap<[aRelationship.first.holder.name.toUpperFirst()/], [aRelationship.second.holder.name.toUpperFirst()/]> [aRelationship.name/] = ArrayListMultimap.create();
@Override
public boolean remove([aRelationship.first.holder.name.toUpperFirst()/] [aRelationship.first.holder.name.toLowerFirst()/], [aRelationship.second.holder.name.toUpperFirst()/] [aRelationship.second.holder.name.toLowerFirst()/]){
	return [aRelationship.name/].remove([aRelationship.first.holder.name.toLowerFirst()/],[aRelationship.second.holder.name.toLowerFirst()/]);
}
@Override
public List<[aRelationship.second.holder.name.toUpperFirst()/]> get[aRelationship.second.holder.name.toUpperFirst()/]s([aRelationship.first.holder.name.toUpperFirst()/] [aRelationship.first.holder.name.toLowerFirst()/]){
	return [aRelationship.name/].get([aRelationship.first.holder.name.toLowerFirst()/]);
}
@Override
public List<[aRelationship.first.holder.name.toUpperFirst()/]> get[aRelationship.first.holder.name.toUpperFirst()/]s([aRelationship.second.holder.name.toUpperFirst()/] [aRelationship.second.holder.name.toLowerFirst()/]){
	List<[aRelationship.first.holder.name.toUpperFirst()/]> [aRelationship.first.holder.name.toLowerFirst()/]s=new ArrayList<[aRelationship.first.holder.name.toUpperFirst()/]>();
	for (Map.Entry<[aRelationship.first.holder.name.toUpperFirst()/],[aRelationship.second.holder.name.toUpperFirst()/]> entry : [aRelationship.name/].entries()) {
		if (Objects.equals([aRelationship.second.holder.name.toLowerFirst()/], entry.getValue())) {
			[aRelationship.first.holder.name.toLowerFirst()/]s.add(entry.getKey());
		}
	}		
	return [aRelationship.first.holder.name.toLowerFirst()/]s;
}
[/template][/comment]
[template private relationshipOptionsImplGen(aRelationship : Relationship) ]
List<Map.Entry<[aRelationship.first.holder.name.toUpperFirst()/], [aRelationship.second.holder.name.toUpperFirst()/]>> [aRelationship.name/]=new ArrayList<Map.Entry<[aRelationship.first.holder.name.toUpperFirst()/], [aRelationship.second.holder.name.toUpperFirst()/]>>();

@Override
public boolean remove([aRelationship.first.holder.name.toUpperFirst()/] [aRelationship.first.holder.name.toLowerFirst()/], [aRelationship.second.holder.name.toUpperFirst()/] [aRelationship.second.holder.name.toLowerFirst()/]){
	for(int i = 0;i<[aRelationship.name/].size();i++) {
		Map.Entry<[aRelationship.first.holder.name.toUpperFirst()/], [aRelationship.second.holder.name.toUpperFirst()/]> entry=[aRelationship.name/].get(i);
		if(entry.getKey().equals([aRelationship.first.holder.name.toLowerFirst()/])&&entry.getValue().equals([aRelationship.second.holder.name.toLowerFirst()/])){
			[aRelationship.name/].remove(i);
			return true;
		}
	}
	return false;
}

@Override
public List<[aRelationship.second.holder.name.toUpperFirst()/]> get[aRelationship.second.holder.name.toUpperFirst()/]s([aRelationship.first.holder.name.toUpperFirst()/] [aRelationship.first.holder.name.toLowerFirst()/]){
	List<[aRelationship.second.holder.name.toUpperFirst()/]> [aRelationship.second.holder.name.toLowerFirst()/]s=new ArrayList<[aRelationship.second.holder.name.toUpperFirst()/]>();
	for(int i = 0;i<[aRelationship.name/].size();i++) {
		Map.Entry<[aRelationship.first.holder.name.toUpperFirst()/], [aRelationship.second.holder.name.toUpperFirst()/]> entry=[aRelationship.name/].get(i);
		if(entry.getKey().equals([aRelationship.first.holder.name.toLowerFirst()/])){
			[aRelationship.second.holder.name.toLowerFirst()/]s.add(entry.getValue());
		}
	}
	return [aRelationship.second.holder.name.toLowerFirst()/]s;
}
@Override
public List<[aRelationship.first.holder.name.toUpperFirst()/]> get[aRelationship.first.holder.name.toUpperFirst()/]s([aRelationship.second.holder.name.toUpperFirst()/] [aRelationship.second.holder.name.toLowerFirst()/]){
	List<[aRelationship.first.holder.name.toUpperFirst()/]> [aRelationship.first.holder.name.toLowerFirst()/]s=new ArrayList<[aRelationship.first.holder.name.toUpperFirst()/]>();
	for(int i = 0;i<[aRelationship.name/].size();i++) {
		Map.Entry<[aRelationship.first.holder.name.toUpperFirst()/], [aRelationship.second.holder.name.toUpperFirst()/]> entry=[aRelationship.name/].get(i);
		if(entry.getValue().equals([aRelationship.second.holder.name.toLowerFirst()/])){
			[aRelationship.first.holder.name.toLowerFirst()/]s.add(entry.getKey());
		}
	}		
	return [aRelationship.first.holder.name.toLowerFirst()/]s;
}
[/template]
